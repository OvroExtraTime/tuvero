2016-10-02	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/fileloadcontroller.js: error Toasts miswording fixed

	* legacy/scripts/ui/strings.js: nofiles added

	* legacy/scripts/ui/loginview.js: automatically open login window

2016-09-18	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/timemachinecommitcontroller.js: Hover-rename disabled. It shows unexpected behaviour

	* legacy/scripts/ui/tournamentrenamecontroller.js: Hover-rename disabled. It shows unexpected behaviour

	* core/style/tabview.css: showing pointer cursor on options

	* core/templates/historytab.html: not showing pointer cursor on hints

	* core/templates/newtab.html: not showing pointer cursor on hints

	* core/templates/teamstab.html: not showing pointer cursor on hints

	* legacy/style/app.css: showing default cursor everywhere

	* legacy/style/general.css: hover-cursors disabled for printing
	underlining of rename input boxes disabled

	* legacy/style/teams.css: hover-cursors disabled for printing

	* core/scripts/listmodel.js: includes() function added

	* core/scripts/test/listmodel.js: testing ListModel.includes()

	* legacy/scripts/ui/noregmodel.js: LengthModel isn't sufficient for noreg-decisions

	* legacy/scripts/ui/teamstab.js: Using NoRegModel for Reg-Closing classes

	* legacy/scripts/ui/tournamentcontroller.js: hover-renaming disabled

2016-07-24	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/settingstab.html: Login test fields moved to first position
	logout button added
	state output added

	* legacy/scripts/ui/logincontroller.js: logout button added

	* legacy/scripts/ui/loginmodel.js: state-based login model added (username for testing only)

	* legacy/scripts/ui/loginview.js: output fields added (state, token, username)

2016-07-03	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/settingstab.html: crude LoginView added to settings tab
	minor update to force server cache update
	using iframe instead of secondary window
	iframe and unnecessary buttons removed

	* legacy/scripts/ui/settingstab.js: LoginView added to settings tab
	LoginModel supersedes LoginView logic

	* legacy/scripts/ui/logincontroller.js: LoginController added (crude logic)
	must fetch token with cookie credentials
	most logic moved to LoginModel

	* legacy/scripts/ui/loginview.js: LoginView added

	* legacy/scripts/ui/loginmodel.js: Logic from LoginView and LoginController moved here
	'error not defined' bug fixed
	"logginin->loggingIn" typo fixed

2016-07-02	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/autocompletionview.js: Electron support: check for typeahead before usage

	* legacy/style/buttons.css: buttons don't have an outline anymore

	* Makefile: Pseudo-Chromeapp capabilities added

	* core/style/tabmenuview.css: box-shadow for unopened menu elements added
	outline-style changed to outline

	* core/templates/hometab.html: hiding chrome recommendation in chrome browsers

	* legacy/scripts/ui/hometab.js: hiding chrome recommendation in chrome browsers

	* legacy/style/new.css: h3:last-child was still used, but removed earlier

	* legacy/style/input.css: checkbox outline removed

2016-06-30	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/style/newteamview.css: using new input field design

	* legacy/style/buttons.css: new button design
	missing color added
	font size

	* legacy/style/input.css: new input field design
	font size

	* legacy/style/teams.css: using new input field design

	* legacy/style/teamsizeview.css: using new button design

	* core/style/boxview.css: uses same design as the buttons

	* core/style/fontsizeview.css: using same highlighting color as 'button.selected'

	* legacy/style/fileload.css: using default button color instead of white

	* legacy/style/new.css: using boxview colors for 'system table' headers

	* core/templates/correctionform.html: inputs are input.mini

	* core/templates/finishmatchform.html: inputs are input.mini

	* core/templates/komatchresult.html: inputs are input.mini

	* core/templates/teamstab.html: inputs are input.mini

	* legacy/scripts/ui/renamecontroller.js: hover-rename is now possible

	* legacy/scripts/ui/timemachinecommitcontroller.js: using hover-rename

	* legacy/scripts/ui/tournamentcontroller.js: using hover-rename

	* legacy/scripts/ui/tournamentrenamecontroller.js: using hover-rename

	* legacy/style/general.css: hover-exclamation mark is removed
	correctable match results are highlighted just as renamable stuff

	* legacy/style/toasts.css: Toasts hover above the page now, instead of being flat

	* core/style/fontsize.css: font size is taken care of by the specific files (input.css and buttons.css)

2016-06-27	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/style/teams.css: #267 fixed: team input layout without typeahead

2016-06-23	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* index.html: favicon taken from inside images/, not basic/images

	* core/templates/hometab.html: 'create tournament' step added to HowTo-List
	using fileload drag/drop style

	* core/scripts/swisstournamentmodel.js: automatically using 'wins' as first ranking component for wingroups (swissmode='wins')

	* core/templates/fonthotkeys.html: placeholder links for font hotkeys added

	* core/templates/index.html: including fonthotkeys.html

	* legacy/scripts/ui/backgroundscripts/fonthotkeys.js: hashchange-listener for font hotkeys
	debugging output removed

	* core/style/mainstyle.css: using fileload drag/drop style

	* core/templates/teamstab.html: using fileload drag/drop style

	* legacy/scripts/ui/fileloadcontroller.js: event precedence order (and 'preventDefault' order) fixed

	* legacy/scripts/ui/strings.js: Strings.onlyonefile added

	* legacy/scripts/ui/backgroundscripts/dropstyle.js: adjusting fileload button styles according to drop status

	* legacy/style/fileload.css: styles for drag&drop status

2016-06-20	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* images/basic.png: dedicated image for Tuvero Basic added

	* index.html: linking to basic.png

2016-04-24	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/backgroundscripts/initboxviews.js: StaticViewLoader removed
	moved to initboxviews

	* legacy/scripts/ui/backgroundscripts/initviews.js: StaticViewLoader removed
	moved to initboxviews

	* legacy/scripts/ui/staticviewloader.js: completely removed

	* test/boxview.html: StaticViewLoader finally removed

	* test/fontsize.html: StaticViewLoader finally removed

	* core/chromeapp/background.js: template for chromeapp background script added

	* core/chromeapp/manifest.json: template for chromeapp manifest added

	* core/scripts/common.js: initviews -> initboxviews

	* .gitignore: ignoring build-chromeapp

	* Makefile: `make build-chromeapp` and `make all` added

	* tools/chromeapp.sh: create chromeapp from a built variant

2016-04-23	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/renamecontroller.js: don't initiate renaming if getName() returns undefined;

	* legacy/scripts/ui/teamcontroller.js: commented out code: return 'undefined' for bye names

	* legacy/scripts/timemachine/commitmodel.js: window.localStorage made optional

	* legacy/scripts/timemachine/reflog.js: window.localStorage made optional
	localStorage-related infinite refresh-loop bug fixed

	* legacy/scripts/timemachine/test/query.js: window.localStorage made optional

	* legacy/scripts/timemachine/timemachine.js: window.localStorage made optional

	* legacy/scripts/ui/backgroundscripts/reset.js: window.localStorage made optional

	* legacy/scripts/ui/debugtab.js: window.localStorage made optional

	* legacy/scripts/ui/legacystoragekeyconverter.js: window.localStorage made optional

	* legacy/scripts/ui/storage.js: window.localStorage made optional

	* basic/index.html: removed from git. run `make templates` to regenerate

	* boule/index.html: removed from git. run `make templates` to regenerate

	* tac/index.html: removed from git. run `make templates` to regenerate

	* legacy/scripts/timemachine/query.js: window.localStorage made optional

	* legacy/style/app.css: ChromeApp scrolling enabled

	* .gitignore: removed index files are now git-ignored

	* core/style/tabmenuview.css: outline of tabicons removed

2016-04-10	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/timemachinecommitview.html: RenameController

	* legacy/scripts/ui/renamecontroller.js: All click-renaming is taking place here
	use of 'hidden' classes for rename stuff to reduce CSS footprint
	Act on the $anchor directly, instead of writing classes to the parent
	bind to dynamically added elements
	destroy() implemented
	also looking for '.rename' using $.filter, not just $.find (0th-level-elements)
	ignoring input-click events, which mess with text selection

	* legacy/scripts/ui/timemachinecommitcontroller.js: extends RenameController

	* legacy/style/rename.css: supposed to contain rename rules only
	removed again. use 'hidden' classes instead

	* legacy/style/timemachine.css: rename stuff moved to rename.css
	hover underline moved to general.css

	* core/templates/teamstab.html: use RenameController classes (.rename instead of .editable)

	* legacy/scripts/ui/teamnamecontroller.js: extend RenameController
	TeamNameController removed

	* legacy/style/general.css: use RenameController classes (.rename instead of .editable)
	underline .rename when hovered over

	* core/templates/kosystem.html: using .rename

	* core/templates/roundsystem.html: using .rename

	* core/templates/swisssystem.html: using .rename

	* legacy/scripts/ui/tournamentcontroller.js: extending RenameController

	* legacy/style/new.css: using RenameController for rename styling

	* legacy/scripts/ui/teamstab.js: TeamNameController removed

	* core/templates/newtab.html: '.rename' classes added

	* legacy/scripts/ui/teamcontroller.js: Renaming logic team-by-team
	destroy() implemented

	* legacy/scripts/ui/teamview.js: Using TeamController
	destroy() implemented

	* core/scripts/controller.js: Controller.prototype.destroy() added

	* core/scripts/tournamentmodel.js: Type ('core/type') wasn't loaded

	* core/templates/rankingview.html: using TeamView classes

	* legacy/scripts/ui/rankingview.js: using TeamView for team lists, which enables team name editing
	Side effect: TeamView instances replace TeamCollector
	destroy() implemented

	* core/templates/koteam.html: KOTree teams can be renamed

	* core/templates/matchtable.html: rename capability added

	* legacy/style/matchresult.css: input width only applies to scores

	* core/templates/progresstable.html: rename teams from within the progress table

	* legacy/scripts/ui/matchview.js: disallow empty-team renaming

	* core/templates/gamestab.html: byevote renaming enabled
	tournament renaming enabled

	* core/templates/rankingtab.html: tournament renaming enabled

	* core/templates/tournamentlist.html: tournament renaming enabled

	* legacy/scripts/ui/tournamenthistoryview.js: tournament renaming enabled

	* legacy/scripts/ui/tournamentmatchesview.js: tournament renaming enabled

	* legacy/scripts/ui/tournamentrankingview.js: tournament renaming enabled

	* legacy/scripts/ui/tournamentrenamecontroller.js: tournament renaming enabled

	* legacy/scripts/ui/boxcontroller.js: ignoring header-clicks on input tags

2016-04-08	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* boule/scripts/presets.js: boulesdb disabled

2016-04-07	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/kotournamentmodel.js: using addBye()

	* core/scripts/roundtournamentmodel.js: using addBye()

	* core/scripts/swisstournamentmodel.js: using addBye()

	* core/scripts/tournamentmodel.js: addBye() added

	* core/templates/teamstab.html: .downloadcsvexample renamed from something else

	* legacy/scripts/ui/teamstab.js: .downloadcsvexample selector bug fixed

	* legacy/style/teams.css: .downloadcsvexample visibility bug fixed

	* core/templates/timemachinecommitview.html: rename input added

	* legacy/scripts/ui/timemachinecommitcontroller.js: rename input enabled
	escape-button works now

	* legacy/style/timemachine.css: rename input visibility enabled

	* core/templates/hometab.html: tournament rename hint added

2016-03-25	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/*tab.html: header-buttons use the 'left' class instead of special rules

	* legacy/style/buttons.css: header button rules removed

	* legacy/style/general.css: float-right/left renamed to right/left

	* core/templates/teamstab.html: csv-load input replaced with button
	data-imgs added for delete buttons
	file input removed in favor of FileLoadController

	* legacy/scripts/ui/teamsfileloadcontroller.js: logic for button-to-input click delegation added
	load prereg.csv by drag-and-drop (no additional indicators yet)
	using FileLoadController as base class

	* legacy/scripts/ui/teamstab.js: teamsfileload button added
	.filereader -> .fileloadteams
	using new StateFileLoadController constructor

	* legacy/style/teams.css: button rules simplified

	* core/templates/hometab.html: fileload input moved from settingstab
	file input removed in favor of FileLoadController

	* core/templates/settingstab.html: fileload input moved to hometab

	* legacy/scripts/ui/backgroundscripts/load.js: removed in favor of fileloadcontroller

	* legacy/scripts/ui/fileloadcontroller.js: $button handling copied over from teamsfileloadcontroller
	Copied to StateFileLoadcontroller
	Used as base class for all file loading

	* legacy/scripts/ui/hometab.js: FileLoadController moved from settingstab
	using new TeamsFileLoadController constructor

	* legacy/scripts/ui/settingstab.js: FileLoadController moved to hometab

	* legacy/scripts/ui/statefileloadcontroller.js: superseeds FileLoadController
	Uses the new FileLoadController class as a base class, just like TeamsFileLoadController

	* legacy/scripts/ui/unicodehelper.js: collection of functions which were used in CSV reading:
	Unicode detection and conversion

	* legacy/scripts/ui/backgroundscripts/autosave.js: detecting whether you can even save, else 'autosave fails' messages are sent

2016-03-20	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/rankingdatalistenerindex.js: HeadToHead problem with indirect dependencies fixed

2016-03-19	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/fileloadcontroller.js: unloading current state on error
	removing '.txt' and '.csv' suffixes as well

	* legacy/scripts/ui/legacyloadermodel.js: missing `State.clear()` added

	* legacy/scripts/ui/teamsfileloadcontroller.js: using function binding instead of injected fields
	separate 'load' function, which doesn't deal with FileReaders and stuff. To be extracted to TeamsCSVLoader or so

	* legacy/scripts/ui/backgroundscripts/reset.js: updating timemachine roots

	* legacy/scripts/ui/gamestab.js: commented-out code removed

	* core/templates/hometab.html: 'json' restriction lifted

	* legacy/scripts/ui/stateloader.js: resort to CSV-loading the teams if JSON doesn't work

	* core/scripts/config.js: backend/ dir removed

	* core/scripts/random.js: moved from backend/random

	* core/scripts/test/random.js: moved from backend/test/random

	* tools/create-commonjs.sh: backend/ dir removed

	* tools/create-testjs.sh: backend/ dir removed

	* legacy/scripts/ui/registerteamscontroller.js: create new tournament, if necessary

	* legacy/scripts/ui/statesaver.js: canSave() function added

	* legacy/scripts/ui/registeridscontroller.js: create new tournament, if necessary

2016-03-13	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/teamsfileloadcontroller.js: Didn't read the right teamsize values from the Presets
	completely rewrote the CSV parser

	* legacy/scripts/ui/test/teamsfileloadcontroller.js: Testing CSV import and teamsize heuristic

	* NEWS: NEWS updated prior to 1.5.5 release
	Work on 1.5.6 started

2016-03-10	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/type.js: IE-related Type.is() bug fixed
	bugfix had a bug

	* legacy/scripts/ui/backgroundscripts/tab*cheaphacklistener.js: logic moved into 'ui/*tab'

	* legacy/scripts/ui/*tab.js: contains tab visibility logic

	* legacy/scripts/ui/tabshandle.js: loading order fixed

	* core/templates/head.html: <script> tags moved here

	* core/templates/index.html: <script> tags moved to head

	* legacy/scripts/ui/csvexportcontroller.js: using tiny csv export symbols

	* legacy/scripts/ui/popoutcontroller.js: popouts prefer <style> tags over <link> tags

	* Makefile: `make testserver` added
	build-compression works in-place, not replacing the variant index.html files

	* core/templates/settingstab.html: tiny csv buttons

	* tools/compress-build.sh: work in-place on the index.html files
	final output improved
	liberally inserted 'exit 1' for proper `make`-abort

	* tools/write-sprite.sh: duplicate data-uris removed

2016-03-09	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/style/boxview.css: icon styles unified
	pagebreak rules added

	* legacy/scripts/ui/popoutboxview.js: pagebreak icon added
	close button text changed to 'x'

	* legacy/scripts/ui/popoutcontroller.js: pagebreak icon added
	centralized closeMainPopout() function
	properly destroying the main popout when it's closed, which allows to create a new one

	* legacy/scripts/ui/statesaver.js: properly unloading when creating a new save

2016-03-08	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/style/fontsizeview.css: fontsize button sizes independent of their <body>

	* core/templates/*table.html: popout-compatible tables need to have 'font-size=100%'

	* core/templates/settingstab.html: separate fontsize for popouts

	* legacy/scripts/ui/backgroundscripts/initviews.js: not initializing fontsizeviews anymore

	* legacy/scripts/ui/fontsizeview.js: fontsize button sizes are independent of the containing body

	* legacy/scripts/ui/popoutcontroller.js: using popout fontsizeview

	* legacy/scripts/ui/settingstab.js: using and initializing separate fontsize for popout

2016-03-07	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* basic/scripts/strings.js: %teamstext% added

	* core/templates/newsystem.html: %teamstext% added

	* core/templates/swisssystem.html: %teamstext% added

	* core/templates/teamstab.html: %teamstext% added

	* legacy/scripts/ui/strings.js: %teamstext% added

	* tac/scripts/strings.js: %teamstext% added
	custom ranking component strings

	* legacy/scripts/ui/teamsfileloadcontroller.js: teamsize is checked when loading csv files

	* tac/scripts/presets.js: default ranking components adjusted

	* legacy/scripts/timemachine/timemachine.js: automatically unloading during load()

	* legacy/scripts/ui/popoutcontroller.js: closing all popouts on timemachine unload

	* legacy/scripts/ui/kotreeposition.js: top-padding reduced by 0.5em

	* legacy/scripts/ui/kotreeview.js: auto-reducing top-padding if top-left match is missing

	* legacy/scripts/ui/generictournamenthistoryview.js: simplified constants-structure
	setting this.showlists for list-compatible tournament types

	* legacy/scripts/ui/tournamenthistoryview.js: respecting genericTournament.showlists
	always showing KO trees
	Don't draw KO match lists, since they're useless anyway

	* legacy/style/history.css: always showing KO trees

2016-02-24	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* index.html: icons re-arranged
	lower-case list items
	spacing reduced

2016-02-23	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* NEWS: pre-release update

	* core/templates/swisssystem.html: maxrounds text made more understandable

	* tools/prepare-release.sh: 'basic' folder needs to be removed
	'images' folder needs to be removed, too

2016-02-22	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* index.html: style simplified
	img sizes and layout optimized
	min-width for header added
	typos fixed

	* core/templates/swisssystem.html: .swissmaxroundview added to .initial and .idle

	* legacy/scripts/ui/swissmaxroundview.js: showing the approximate maximum number of rounds

	* legacy/scripts/ui/swisstournamentview.js: SwissMaxRoundView added

	* legacy/style/new.css: .infotext rules added

2016-02-21	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/settingstab.html: savedate display removed
	"New Tournament" input added
	referencing {{timemachineview}}
	timemachineview moved to hometab

	* legacy/scripts/ui/settingstab.js: savedate display removed
	TimeMachine-logic extracted to TimeMachineView
	TimeMachineView moved to hometab
	FileLoadController re-instated

	* legacy/scripts/ui/backgroundscripts/autosave.js: Don't save on clear(), since TimeMachine takes care of that

	* legacy/scripts/ui/statesaver.js: createNewEmptyTree() added
	removeEverything() removes every entry for the current target

	* legacy/scripts/ui/timemachinenewtreecontroller.js: Controller for tree creation added

	* legacy/scripts/timemachine/timemachine.js: save() doesn't initiate a new tree, it just fails.
	unload() added
	isActive() and isRelatedToActive() added
	TimeMachine.commit made into a ValueModel
	load(undefined) returns the current state

	* legacy/scripts/ui/stateloader.js: unload() added

	* legacy/scripts/ui/timemachinecommitview.js: using TimeMachine.isRelatedToActive()
	BoxView added

	* legacy/scripts/ui/strings.js: reflog tree removal confirmations added
	Long strings shortened
	clearstorage text emphasized
	"reloading..." text isn't accurate anymore
	'notournament' added

	* legacy/scripts/ui/timemachinecommitcontroller.js: asking for confirmation before tree deletion
	confirmation text includes the tournament name
	download button enabled. uses FileSaverModel

	* core/templates/timemachinecommitview.html: cleanup-button removed
	Germanized
	button images added
	download button added

	* legacy/scripts/ui/backgroundscripts/save.js: using TimeMachine.load() instead of TimeMachine.commit.load()
	use a FileSaverModel

	* core/scripts/main.js: Storage.enable/disable removed

	* legacy/scripts/ui/autocompletionlegacyblobber.js: lazy-loading the Storage object

	* legacy/scripts/ui/backgroundscripts/online.js: Storage hints aren't required anymore

	* legacy/scripts/ui/debugtab.js: clear-button properly resets the whole time machine
	use StateSaver.removeEverything()

	* legacy/scripts/ui/fileloadcontroller.js: Doesn't require Storage anymore
	take tournament name from file name
	send load error toast when file doesn't match json format
	removing trailing .json from the filename

	* legacy/scripts/ui/storage.js: simplified. It only serves the player names, no need for crazy stuff

	* core/templates/timemachineview.html: Extracted from settingstab.html
	containing box removed. The tab takes care of it.
	necessary newtournament button classes added

	* legacy/scripts/ui/timemachineview.js: Extracted from settingstab.js
	global storage save button removed

	* core/templates/hometab.html: timemachineview moved here
	load/save texts optimized
	tuvero logo centered

	* legacy/scripts/ui/hometab.js: timemachineview moved here
	use StateSaver.removeEverything()

	* legacy/style/settings.css: unused rules removed

	* legacy/style/timemachine.css: .rootcommits margin added

	* tools/write-sprite.sh: vertical-align of images according to .inline class
	button, h2 and .middle-elements are middled

	* legacy/scripts/ui/backgroundscripts/reset.js: accessibility of windows.localStorage/windows.location

	* legacy/scripts/ui/backgroundscripts/tabteamscheaphacklistener.js: Team entry disabled when no tournament has been selected

	* legacy/scripts/ui/filesavermodel.js: save a single commit
	removing trailing .json from tournament name

	* legacy/scripts/ui/csvexportcontroller.js: save into a tournament-named .csv file

	* basic/scripts/presets.js: static filenames removed

	* boule/scripts/presets.js: static filenames removed

	* tac/scripts/presets.js: static filenames removed

	* test/scripts/presets.js: player name loading disabled
	static filenames removed

	* legacy/scripts/timemachine/test/query.js: useless tests removed
	bugs in test suite fixed

	* legacy/scripts/timemachine/query.js: ROOTKEY bug fixed

	* core/images/tuvero.png: tuvero logo added

	* images/: images for index.html

	* index.html: redesign
	app icons aligned

	* Makefile: index.html redesign changed the required files for the manifest

2016-02-20	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/timemachine/reflog.js: 'no latest key found' is NOT an error.
	auto-creating a new reflog.
	unique root key guarantee

	* legacy/scripts/timemachine/timemachine.js: Reading default name from Presets
	missing cleanup event added
	relatedKey -> relatedCommit
	Debugging disabled
	cleanup(): verifying whether relatedCommit is CommitModel instance.
	load() function added
	default tree name also applies to init()
	save() only writes to localStorage if there's a change in the stored data

	* legacy/scripts/ui/settingstab.js: missing $template variable added
	initcommits -> rootcommits

	* legacy/scripts/ui/storage.js: timeMachineKey -> timeMachineCommit
	lastSaveDate is a localeString-date
	dbname-saving has been removed. Using StateSaver/StateLoader instead

	* core/templates/settingstab.html: timemachine commits are arranged in divs

	* legacy/scripts/ui/timemachinecommitview.js: multiple lines inside a single div. Looks ok.
	updating on cleanup
	setting an '.activetree' class for all TimeMachineCommitViews
	initializing TimeMachineCommitController

	* core/templates/timemachinecommitview.html: missing file added
	load, remove and cleanup-buttons added

	* legacy/style/timemachine.css: missing file added
	activetree rules added

	* legacy/scripts/ui/backgroundscripts/tournamenterrortoasts.js: misleading comments removed

	* legacy/scripts/ui/stateloader.js: StateLoader wrapper for State.restore()-calls added

	* legacy/scripts/ui/statesaver.js: StateSaver wrapper for State.save()-calls added
	newTree() function added to make the next commit use create a completely new tree

	* core/scripts/main.js: using StateLoader instead of Storage to load the latest state

	* legacy/scripts/ui/backgroundscripts/autosave.js: using StateSaver instead of Storage

	* legacy/scripts/ui/legacyloadermodel.js: taking a global data object instead of its serialized version.

	* legacy/scripts/ui/storagesavecontroller.js: using StateSaver instead of Storage

	* legacy/scripts/ui/backgroundscripts/save.js: using TimeMachine instead of State.toBlob (read from storage)

	* legacy/scripts/ui/fileloadcontroller.js: using StateSaver and StateLoader instead of State.toBlob

	* legacy/scripts/ui/state.js: Removed.

	* legacy/scripts/ui/*.js: ui/state_new -> ui/state

	* legacy/scripts/ui/state_new.js: moved to state.js for file name consistency

	* core/scripts/tournamentlistmodel.js: variable leak fixed

	* legacy/scripts/ui/timemachinecommitcontroller.js: logic for load, cleanup and removal

2016-02-18	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/timemachine/commitmodel.js: getTreeName, setTreeName and onrename + RefLog listener added

	* legacy/scripts/timemachine/reflog.js: getName and setName added
	'rename' event added
	RefLog only changes the name if it doesn't already match

	* legacy/scripts/timemachine/timemachine.js: init and save adjusted for 'name' events
	cleanup() function added

	* legacy/scripts/ui/timemachinecommitview.js: showing the name

	* legacy/scripts/ui/storage.js: automatically calling TimeMachine.cleanup() after TimeMachine.save()

2016-02-16	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* basic/images/favicon.png: using Tuvero logo

	* basic/images/games.png: using Tuvero logo

2016-02-14	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/timemachine/reflog.js: formatTargetKey() function for database key creation
	many comments added
	support for multiple parallel browser sessions added

	* legacy/scripts/timemachine/timemachine.js: usedRelatedStorage() lists the storage size of a single tree
	listening for 'remove' events on root commits
	using createRoot() and createChild()
	comments added
	reflog-debug interval increased from 50 to 500 ms

	* legacy/scripts/ui/timemachinecommitview.js: showing usedRelatedStorage() information

	* legacy/scripts/timemachine/commitmodel.js: function comments added
	isAncestorOf() added
	emitting 'remove' events
	isEqual() added
	init-key renamed to root key
	init() and save() renamed to createRoot() and createChild()
	getRoot() added
	getYoungestAncestor -> getYoungestDescendant

	* core/templates/settingstab.html: order of boxes changed for better debugging

	* legacy/scripts/timemachine/keyquerymodel.js: moved and renamed to query

	* legacy/scripts/timemachine/query.js: moved from keyquerymodel
	Model dependency removed
	renamed to Query

	* legacy/scripts/timemachine/keymodel.js: avoiding the overloaded constructor
	isValidDate() added

2016-02-13	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/timemachinecommitmodel.js: transparent wrapper around reflog, localStorage and keys

	* legacy/scripts/ui/timemachinekeymodel.js: sortFunction added

	* legacy/scripts/ui/timemachinekeyquerymodel.js: ALLTUVEROKEYS added

	* legacy/scripts/ui/timemachinemodel.js: completely remodeled

	* legacy/scripts/ui/timemachinereflog.js: made into a singleton
	moved from timemachinereflogmodel.js

	* legacy/scripts/ui/timemachinereflogmodel.js: moved to timemachinereflog

2016-02-12	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/test/timemachinekeyquerymodel.js: testing local storage queries

	* legacy/scripts/ui/timemachinekeyquerymodel.js: should be finished...

	* legacy/scripts/ui/test/timemachinekeymodel.js: testing isTuveroKey

	* legacy/scripts/ui/timemachinekeymodel.js: isTuveroKey() function added for testing different targets
	construct() added

	* legacy/scripts/ui/timemachinemodel.js: removed all code that has been moved to TimeMachineKeyModel

	* legacy/scripts/ui/timemachinereflogmodel.js: TimeMachineRefLogModel functionality is there.

2016-02-11	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/test/timemachinekeymodel.js: testing typical timemachinekey scenarios
	testing isInitKey

	* legacy/scripts/ui/timemachinekeymodel.js: isValidKey, isRelated and isEqual added
	isInitKey() added

	* legacy/scripts/ui/timemachinekeyquerymodel.js: simple model for key name querying added

2016-02-07	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/strings.js: single properties are auto-superseded by scripts/strings.js

	* tac/scripts/strings.js: teamstext='Team', not 'Spieler'

	* core/templates/gamestab.html: Spieler -> %teamstext%

	* core/templates/historytab.html: Spieler -> %teamstext%

	* core/templates/hometab.html: Spieler -> %teamstext%

	* core/templates/matchtable.html: Spieler -> %teamstext%

	* core/templates/newtab.html: Spieler -> %teamstext%

	* core/templates/progresstable.html: Spieler -> %teamstext%

	* core/templates/rankingtab.html: Spieler -> %teamstext%

	* core/templates/rankingview.html: Spieler -> %teamstext%

	* core/templates/swissvotes.html: Spieler -> %teamstext%

	* core/templates/teamstab.html: Spieler -> %teamstext%

	* tools/process-template.py: missing line breaks added

	* test/scripts/strings.js: 'strings' dependency is required now ...

	* legacy/scripts/ui/statemodel.js: Reading taboptions from Presets, if available.

	* tac/scripts/presets.js: default taboptions: no maxwidth for names
	default taboptions: show matchtables

	* legacy/scripts/ui/popoutcontroller.js: popout taboptions: hidefinishedrounds implemented

	* basic/images/favicon.png: using the unofficial tuvero logo

	* basic/images/games.png: using the unofficial tuvero logo

	* basic/scripts/presets.js: swiss ranking simplified

	* basic/scripts/strings.js: teamsicon wasn't visible

	* basic/templates/teamsizeview.html: teamsize selection disabled

	* core/images/teams.png: moved from tac

	* index.html: using Basic favicon
	Link to Tuvero Basic added

	* tac/images/teams.png: moved to core

2016-02-06	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/hometab.html: .errorlink marker added

	* legacy/scripts/ui/hometab.js: adding browser data to .errorlink

2016-02-05	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/komatchresult.html: switched from tables to divs
	'.match' class added to .komatchresult for #210 fix

	* core/templates/koteam.html: switched from tables to divs

	* legacy/scripts/ui/kotreeview.js: not removing the 'kolineanchor' class

	* legacy/style/kotree.css: style adapted for div-based komatchview

	* legacy/scripts/ui/popoutboxview.js: 'noprint'-class added to "close"-icon

	* legacy/scripts/ui/matchresultcontroller.js: setting 'correcting'-class on the next 'match'-parent, not the direct parent (#210)

	* core/templates/hometab.html: bugreport section added
	printer hint typo fixed
	error reporting: sending variant + version as GET vars.

	* legacy/style/general.css: .float-left/right classes added

	* core/templates/teamstab.html: data-spriteignore attribute added

	* test/tabmenuview.html: data-spriteignore attribute added

	* tools/write-sprite.sh: processing data-tab entries, except those that are followed directly by data-spriteignore

	* Makefile: using provess-template.py instead of index-from-template.sh

	* tools/index-from-template.sh: replaced with process-template.py

	* tools/process-template.py: replacing index-from-template.sh
	100-fold improvement in speed. Results are near-identical (All empty lines were removed, rest is identical)

2016-01-24	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/strings.js: `Strings.display_error` added

	* legacy/scripts/ui/teamremovecontroller.js: change team ID and player names to error messages in case of a display error

	* core/templates/newtab.html: unused templates removed

	* legacy/scripts/ui/systemlistview.js: #206 fixed by forcing an update of all teams after and including the deleted team

	* boule/scripts/presets.js: using PVO ranking components as a default

	* legacy/scripts/ui/popoutcontroller.js: resolved TODOs removed

2016-01-23	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/optionstemplate.js: critical dependency bug related to r.js and require.js "fixed" by adding an empty dependency array

2016-01-17	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/listmodel.js: listmodel: printing stack trace, not just error message

	* core/style/boxview.css: .close icon rules added

	* legacy/scripts/ui/popoutboxview.js: .close icon added

	* legacy/scripts/ui/popoutcontroller.js: .close icon + placeholder close() function added
	close() button removes a popout instance

2016-01-16	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/style/boxview.css: not viewing boxview minmax icons in a popout

2016-01-11	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/popoutcontroller.js: using and maintaining a singular main popout window
	closing main popout when leaving the main app

	* legacy/style/history.css: css rules simplified and globalized
	MatchResultView-specific rules moved to matchresult.css
	tab options moved to taboptions.css

	* legacy/style/matchresult.css: dedicated file for MatchResultView-specific rules
	rules for .matchtable compatibility added

	* legacy/style/progresstable.css: MatchResultView-specific rules moved to matchresult.css

	* legacy/style/taboptions.css: Tab Options rules

	* core/templates/gamestab.html: .dontprintresultcol class added to container

	* core/templates/matchtable.html: .matchrow class renamed to .match for matchresult.css compatibility

	* legacy/scripts/ui/matchtableview.js: .matchrow class renamed to .match for matchresult.css compatibility

	* legacy/style/games.css: moved to voteview.css

	* legacy/style/general.css: '.teamlist .teamno' rule simplified

	* legacy/style/matchtable.css: redundant rules removed (matchresult.css)

	* legacy/style/voteview.css: moved from games.css

	* core/style/boxview.css: not printing header icons

	* core/style/table.css: all table cells are centered, even in popouts (user stylesheet was overwriting it)

2016-01-06	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* tools/getexports.sh: accelerated by 250% by simple parallelization
	including lines for Options and Presets

	* tools/listrequires.sh: using nodejs to export and correlate module and argument names

	* legacy/scripts/ui/options.js: moved to optionstemplate.js

	* legacy/scripts/ui/optionstemplate.js: moved from options.js
	renamed Options to OptionsTemplate

	* tools/listdependencies.sh: properly excludes circular dependencies

	* tools/listscripts.sh: list all core/legacy module scripts

	* boule/scripts/options.js: renamed Options to OptionsTemplate

	* core/scripts/common.js: renamed Options to OptionsTemplate

	* tac/scripts/options.js: renamed Options to OptionsTemplate

	* test/scripts/options.js: renamed Options to OptionsTemplate

2016-01-05	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* tools/listdependencies.sh: ignoring comments and loaded resources

	* tools/listrequires.sh: list currently required modules in each script file

2016-01-02	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* NEWS: Work on 1.5.2 started

	* boule/index.html: ranking: span for tournament name added

	* core/templates/rankingtab.html: span for tournament name added

	* tac/index.html: ranking: span for tournament name added

	* core/style/boxview.css: collapse/decollapse icon added to box header
	rules for a popout header icon added

	* legacy/scripts/ui/boxview.js: popout argument added to BoxView constructor

	* legacy/scripts/ui/tournamentrankingview.js: making the boxview pop out

2016-01-01	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/combinedreferencelistmodel.js: unused 'debugger' statement removed

	* core/scripts/rankingheadtoheadcomponent.js: Missing 'nextcomponent' constructor parameter added

	* core/scripts/test/rankingheadtohead.js: 'subsequent rankings are ignored'-test added

2015-12-27	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/rankingheadtoheadcomponent.js: hiding zero value in ranking.get() output (0 -> '')

	* core/scripts/test/rankingheadtohead.js: changed zeroing behavior

2015-12-25	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* boule/scripts/presets.js: headtohead ranking added

	* tac/scripts/presets.js: headtohead ranking added

	* legacy/scripts/ui/tournamentview.js: not excluding 'id' and 'headtohead' implicitly, but via `presets.js`

	* core/scripts/rankingheadtoheadlistener.js: comments to the new functions added

2015-12-24	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/teamsfileloadcontroller.js: #202 mitigated: iso-8859-1 + utf-8 compatibility with 'ß'

	* boule/scripts/presets.js: names.teamsfile added

	* core/templates/teamstab.html: teamsfile download link added

	* legacy/scripts/ui/teamformatdownloadcontroller.js: downloading an example file

	* legacy/scripts/ui/teamstab.js: binding a TeamFormatDownloadController instance

	* tac/scripts/presets.js: names.teamsfile added

	* test/scripts/presets.js: names.teamsfile added

2015-11-09	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* tools/getexports.sh: list the exported contents of each module
	extracting library names, too

	* tools/create-commonjs.sh: explicitly naming the export

	* tools/listdependencies.sh: list dependencies for every .js file

2015-11-08	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/roundsystem.html: Advanced Options removed

	* legacy/scripts/ui/systemtablerowview.js: .lastrow wasn't set on team registration

	* core/templates/abouttab.html: using the same urls everywhere

	* core/templates/splash.html: using the same urls everywhere

	* index.html: using the same urls everywhere

	* core/scripts/swisstournamentmodel.js: prefiltering upvotes/downvotes to avoid stalls
	double downvote bug fixed

2015-11-07	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/swisstournamentmodel.js: up/downvotes before byes, then invalidate the ranking
	wins were read from displayID, not teamID

	* legacy/scripts/ui/registeridscontroller.js: Enter in the number field is not evaluated by this one

	* legacy/scripts/ui/reverseresultreferencemodel.js: not reversing byes, which should remain immutable

	* legacy/style/kotree.css: names are aligned

2015-11-06	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/kotournamentmodel.js: using Presets.systems.ko.mode

	* core/scripts/swisstournamentmodel.js: using Presets.systems.swiss.mode
	enabling up/downvotes based on the swiss mode, not off by default

	* legacy/scripts/ui/strings.js: TeamView shows byevote as '∅', which is more consistent than 'F'.

2015-11-04	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/style/table.css: CSS specificity of @print table row grouping increased

	* legacy/scripts/ui/tournamentrankingview.js: hiding tournamnets with 'initial' state

2015-11-03	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/debugtab.html: button.registerids added

	* legacy/scripts/ui/debugtab.js: binding registerids button

	* legacy/scripts/ui/registeridscontroller.js: registering teams with their IDs as player names

	* legacy/scripts/ui/storage.js: "store" console output disabled

	* legacy/scripts/ui/systemlistview.js: not using bindLists function anymore: Superseded by variadic ListView arguments

	* legacy/scripts/ui/systemtablerowview.js: bindLists removed
	registerListeners at the bottom of the constructor

	* core/scripts/emitter.js: Critical memory leak fixed

	* core/scripts/listener.js: Critical memory leak fixed

	* legacy/scripts/ui/strings.js: offline-notification text shortened

	* legacy/scripts/ui/update.js: closing "uncached"-toasts after becoming cached
	Only up to one uncached toast.

2015-11-02	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/progresstable.html: rankcomponent columns added
	rankcomponent header columns added

	* legacy/scripts/ui/progressrowview.js: showing rankcomponent columns
	showing human-readable names instead of the canonical component names

	* legacy/scripts/ui/progresstableview.js: rankcomponent header columns added
	forgot to remove extraneous rankingcomponent headers

	* legacy/scripts/ui/strings.js: ranking name for "ranks" added

	* legacy/scripts/ui/statemodel.js: not using ranking abbreviations by default

	* core/templates/newtab.html: "Rang" -> "Platz"

	* core/templates/historytab.html: hiding the "only finished rounds" checkbox

	* legacy/scripts/ui/rankingordercontroller.js: using button presses instead of complicated select-button combinations

	* legacy/scripts/ui/rankingorderview.js: using a simpler DOM structure
	using jquery-supported .hide()/.show() functions caused artifacts. using the .hidden-class now

	* test/rankingorderview.html: simpler visual structure
	updated to match the current implementation

	* core/templates/rankingorderview.html: simpler RankingOrderView layout

	* legacy/style/rankingorderview.css: improved button styling
	numbering added for selected components

	* core/scripts/swisstournamentmodel.js: don't force the use of the 'votes' ranking component

	* legacy/scripts/ui/tournamentview.js: auto-adding selected rankingorder components to the list of available components
	constructor cleanup

2015-11-01	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/matchcontroller.js: tabbing out of the last input element triggers accept()

	* legacy/scripts/ui/generictournamentview.js: destroy function was simply ignored by prototype chain

	* legacy/scripts/ui/systemtablerowview.js: destroy() open tournament views on row destruction

	* legacy/scripts/ui/tournamentcontroller.js: There's no general Controller.destroy() function yet.
	close input field only if it's open.

	* legacy/scripts/ui/tournamentview.js: subcontroller.destroy need not be present

	* legacy/scripts/ui/kotreeposition.js: WIDTH -> getWidth(showName)
	getFollowingPosition() properly passes showNames-argument

	* legacy/scripts/ui/kotreeview.js: auto-adjust width to showName-value

	* legacy/scripts/ui/kolineview.js: using getWidth instead of WIDTH

2015-10-28	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* tools/plato-gh-pages.sh: showing the current progress
	"let" had an unexpected return code
	indexing improved
	commit: --message option added
	`git push` added

	* legacy/scripts/ui/data/swissperms.js: removed

2015-10-26	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/tournamentcontroller.js: destroy() automatically closes the namechange input

	* legacy/scripts/ui/tournamentview.js: destroy() also destroys controller and subcontroller

	* legacy/scripts/ui/systemtablerowview.js: .lastrow CSS class re-introduced
	also updating lastrow right after the creation of a tournament

	* test/boxview.html: <script> moved into <body>

	* test/checkboxview.html: <script> moved into <body>

	* test/fontsize.html: <script> moved into <body>

	* test/koline.html: <script> moved into <body>

	* test/listview.html: <script> moved into <body>

	* test/matchview.html: <script> moved into <body>

	* test/rankingorderview.html: <script> moved into <body>

	* test/rankingview.html: <script> moved into <body>

	* test/teamentry.html: <script> moved into <body>

	* test/teamlistview.html: <script> moved into <body>

	* test/teamsizeview.html: <script> moved into <body>

	* index.html: normalize.css applied

	* NEWS: updated

2015-10-25	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/swisstournamentmodel.js: canGetUpvote() and canGetDownvote() added. Never used.
	hasBye/Upvote/Downvote() functions added
	using 'XafterY' properties during 'canGetX' functions
	ranking dependency: 'byes' -> 'votes'
	findXXX function parameters removed in favor of this.ranking.something
	'enableupdown' property added
	ups and downs outputs added to findXXX
	adding teams to the ups and downs arrays
	outByes/byes, ups and downs joined into the outVotes object
	initialMatches() didn't use outVotes yet. Fixed it.
	missing 'this' added. Now, the up/down/byevotes work.
	auto-appending 'votes' to the rankingorder of a new tournament

	* core/scripts/test/swisstournamentmodel.js: tests now require the teams to be registered.
	unnecessary variables removed
	tests adjusted to not fail in the face of ups and downs
	tests use the outVotes object
	test playthrough for bye votes
	swissmode of bye test corrected. Can't test randomness.

	* core/scripts/propertymodel.js: defaultValues bug fixed: set() -> setProperties()

	* core/scripts/test/propertymodel.js: testing defaultValues

	* core/scripts/propertyvaluemodel.js: Model, which binds properties to a ValueModel for setting/getting

	* core/scripts/test/propertyvaluemodel.js: testing PropertyValueModel value propagations

	* core/templates/swissoptions.html: referencing swissvotes.html

	* core/templates/swissvotes.html: votes matrix added (just look at it to know what i mean)
	descriptions and examples added
	better example (with .forbidden symbols)
	byeupafterbye -> byeafterbye typo fixed

	* legacy/scripts/ui/swisstournamentview.js: BoxView around description
	initialization of SwissVotesView added
	swissvotes selection restricted to uppermost DOM level

	* legacy/style/swissvotes.css: color-coding of previous versions
	using :active instead of :hover. Looks more responsive.
	.forbidden also acts on the description text

	* legacy/scripts/ui/swissvotepropcontroller.js: Controller for a single SwissVotes property

	* legacy/scripts/ui/swissvotepropview.js: View for a single SwissVotes property

	* legacy/scripts/ui/swissvotesview.js: View for swissvotes, which also shows/hides the swissvotes options
	hidden-logic inverted

	* legacy/scripts/ui/backgroundscripts/autosave.js: save after tournament property change

	* legacy/scripts/ui/swisstournamentcontroller.js: swissmode-enableupdowns logic inverted

	* legacy/scripts/ui/strings.js: ranking_ko and ranking_votes strings added

	* boule/scripts/presets.js: added

	* tac/scripts/presets.js: added

	* test/scripts/presets.js: added

	* legacy/scripts/ui/newtournamentcontroller.js: initializing rankingorder from presets

	* legacy/scripts/ui/tournamentview.js: initializing available rankings from presets

	* legacy/scripts/ui/debug.js: Release Candidates aren't considered dev versions

	* legacy/scripts/ui/debugtab.js: only hide the tab in releases, without making it inaccessible

2015-10-19	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/test/rankingtac.js: Test for #165 added

	* core/scripts/rankingtaclistener.js: Fix for #165 added: Wrong sign corrected

	* core/scripts/swisstournamentmodel.js: findSwissByesAndMatches is not a static function anymore. It requires the properties
	findSwissMatches is not static anymore
	separate "canGetBye" function for confirming bye conditions

	* core/scripts/test/swisstournamentmodel.js: testing a tournament instance.

2015-10-08	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/debugtab.js: hiding Debug tab in release versions

	* legacy/scripts/ui/csver.js: removed

	* legacy/scripts/ui/test/treenode.js: removed

	* legacy/scripts/ui/treenode.js: removed

	* legacy/scripts/ui/gamestab.js: closed tournaments get auto-collapsed

	* legacy/scripts/ui/historytab.js: closed tournaments get auto-collapsed

	* legacy/scripts/ui/rankingtab.js: closed tournaments get auto-collapsed

	* core/scripts/main.js: printing stack on load error

2015-09-28	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/roundtournamentmodel.js: Issue #149 fixed: even number of teams don't generate duplicate matches anymore
	numRounds() function added

	* core/scripts/test/roundtournamentmodel.js: testing the matches with 4 teams
	correct match order for five teams

2015-09-20	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/kotournamentmodel.js: createPlaceholderMatches doesn't overwrite existing matches/results
	2d array typo fixed
	createWaitingMatches() function added for tournament repair
	createFollowupMatch() doesn't overwrite running matches
	createFollowupMatch() doesn't overwrite history
	randomIndices -> shuffledIndices, to match "shuffled" mode

	* legacy/scripts/ui/legacyloadermodel.js: createMissingObjects() functions, e.g. for placeholder matches
	translating history team ids to tournament-internal ids. Team names would be blank otherwise
	createMissingObjects() output added
	creating missing objects only after everything else has been loaded
	using createWaitingMatches()
	setting the startIndex properly

	* legacy/scripts/ui/tournamentrankingview.js: TournamentRankingView is also a BoxView

	* core/scripts/tournamentlistmodel.js: prevent restore() from clearing previously restored values (startIndex and closedTournaments)

	* legacy/scripts/ui/csvexportcontroller.js: Controller for CSV Export
	saving CSV into file
	JSDoc comments added
	teams can be CSV-exported
	history can be CSV-exported
	printing stacktrace on saveAs exception
	ranking can be CSV-exported

	* legacy/scripts/ui/settingstab.js: using CSVExportController to enable CSV Export buttons

	* legacy/scripts/ui/strings.js: exportfailed added
	csvheader_teams added
	csvheader_history added
	csvheader_ranking added

	* tools/verify-strings.sh: rudimentary strings search added for now. To be expanded later

2015-09-14	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/autocomplete.js: replaced by AutocompletionView

	* legacy/scripts/ui/autocompletionmodel.js: download and process the player names
	set() function added

	* legacy/scripts/ui/autocompletionview.js: enable and update autocompletion entries for typeahead/bloodhound

	* legacy/scripts/ui/players.js: replaced by AutocompletionModel

	* legacy/scripts/ui/storage.js: Player.toBlob() disabled for now
	saving the AutocompletionModel contents via AutocompletionLegacyBlobber

	* legacy/scripts/ui/teamstab.js: creating and binding AutocompletionModel/View

	* legacy/scripts/ui/autocompletionlegacyblobber.js: serializing/deserializing a single AutocompletionModel

2015-09-13	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/legacyloadermodel.js: verbose output during conversion
	closing finished tournaments
	restoring tournament hierarchy
	more verbose output
	showing Toasts on critical errors
	validating the target (boule/tac)
	votes are restored from ranking or tournament, whatever is still available
	recalculating ranking after votes are extracted

	* core/scripts/tournamentlistmodel.js: overriding clear() to clear this.startIndex and this.closedTournaments

	* legacy/scripts/ui/fileloadcontroller.js: resetting the file chooser every time

	* core/scripts/rankingcomponentindex.js: 'votes' component added

	* core/scripts/rankingdatalistenerindex.js: 'upvotes', 'downvotes' and 'votes' listener added

	* core/scripts/rankingdownvoteslistener.js: listener for the number of downvotes

	* core/scripts/rankingupvoteslistener.js: listener for the number of upvotes

	* core/scripts/rankingvotescomponent.js: this component cannot be sorted by

	* core/scripts/rankingvoteslistener.js: recalc: convert the number of byes, upvotes and downvotes into a string representation

	* legacy/scripts/ui/strings.js: 'votes' strings added
	SBH -> SB typo fixed

	* core/templates/roundsystem.html: "idle"-'close tournament'-button removed. Roundtournaments should always be finished.

	* legacy/scripts/ui/state.js: legacyloader exceptions are printed, including stacktrace

	* legacy/scripts/ui/listview.js: duplication bug with $view.length > 1 fixed

	* legacy/scripts/ui/matchview.js: byes: showing second team as bye

2015-09-12	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/tournamentlistmodel.js: auto-indentation of some source code
	setListeners() should have been a method all along, not a function
	forgot to set the thisArg for the callback functions
	SAVEFORMAT: allowing for additional data to be saved alongside the actual list
	startIndex field added to remember where the tournament starts
	completely new logic for getGlobalRanking(), which relies on the tournament order and the start indices
	tournaments can be closed
	global rank calculations corrected (rank was too high for follow-up tournaments)

	* legacy/scripts/ui/progressrowview.js: showing correct rank for multiple parallel tournaments

	* legacy/scripts/ui/systemtablerowview.js: offsets corrected, so the newtab-tournaments show the correct number of teams
	new counting algorithm for the length of a TournamentView
	'rowspan' code moved to the TournamentView
	passing State.tournaments to TournamentController

	* core/templates/newsystem.html: extracted from {{newtab}}
	input.tournamentsize added for obvious reasons
	showing 'not enough teams' message

	* core/templates/newtab.html: extracted {{newtab}}
	.closetournament button added

	* legacy/scripts/ui/newtournamentcontroller.js: validating and respecting the input.tournamentsize during tournament creation
	register teams first, then add the tournament to the list of tournaments. Saves nothing, but is more intuitive
	resizing the NewTournamentView to the number of selected teams

	* legacy/scripts/ui/newtournamentview.js: adding 'newsystem' class for some specific CSS rules
	showing 'not enough teams' message when less than 2 teams

	* core/scripts/tournamentmodel.js: correct(): team ID bug fixed, which caused a failure of ranking.correct()

	* legacy/scripts/ui/finishroundcontroller.js: 'finish all' with KO tournaments didn't work when isRunningMatch() was false

	* legacy/scripts/ui/backgroundscripts/matchtoasts.js: not showing 'match finished' toast for placeholder matches

	* core/scripts/model.js: restore() failure: printing the responsible object to the console for debugging

	* legacy/scripts/ui/statemodel.js: SAFEFORMAT.tournaments adjusted to new TournamentListModel format
	showmatchtables is false by default

	* legacy/scripts/ui/backgroundscripts/tabhistorycheaphacklistener.js: tab visibility: just look for the first visible tournament, not all.

	* legacy/scripts/ui/tournamenthistoryview.js: box is hidden if the tournament has no history

	* legacy/scripts/ui/tournamentmatchesview.js: box is hidden if the tournament has no matches

	* legacy/scripts/ui/tournamentview.js: setting the rowspan of the TournamentView

	* legacy/scripts/ui/generictournamentview.js: passing State.tournaments to TournamentController

	* legacy/scripts/ui/kotournamentview.js: passing State.tournaments to TournamentController

	* legacy/scripts/ui/roundtournamentview.js: passing State.tournaments to TournamentController

	* legacy/scripts/ui/swisstournamentview.js: passing State.tournaments to TournamentController

	* legacy/scripts/ui/tournamentcontroller.js: .closetournament button logic enabled

	* core/templates/kosystem.html: .closetournament button added

	* core/templates/roundsystem.html: .closetournament button added

	* core/templates/swisssystem.html: .closetournament button added

	* core/scripts/test/tournamentlistmodel.js: broken tests disabled

	* legacy/style/new.css: .notenoughteams rules added

	* core/templates/historytab.html: showmatchtables text made unambiguous

	* legacy/scripts/ui/historytab.js: showmatchtables logic inverted

	* legacy/scripts/ui/legacyloadermodel.js: restoring running and finished KO matches
	restoring corrections

2015-09-11	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/kotournamentmodel.js: creating placeholder matches
	variable typos fixed
	missing parens added
	loserGroupID corrected (was missing a power of 2)
	Max round decreased to 32 to avoid 32 bit integer overflows
	loserGroupID overflow bug fixed
	komaxgroup option added: restricts matches above a certain 'bestrank'
	initialByes property added: whether to keep the byes of the initial matching
	initialByes -> initialbyes
	using 'ko' ranking

	* core/scripts/test/kotournamentmodel.js: loserGroupID() and roundsInGroup() tests corrected
	broken tests removed

	* core/templates/kotree.html: .hidden class added so it doesn't show up for swiss or round

	* core/templates/newtab.html: #games links point to #history
	"Click to Rename" hint added
	ko options have the correct classes

	* core/templates/tabs.html: history and games swapped

	* core/templates/teamstab.html: "Click to Rename" hint added

	* core/templates/kooptions.html: options updated to new KOTournamentModel formularion

	* legacy/scripts/ui/generictournamentview.js: add KOTournamentView

	* legacy/scripts/ui/kotournamentcontroller.js: controller for KO tournaments in the NewTab

	* legacy/scripts/ui/kotournamentview.js: view for KO tournaments in the NewTab

	* legacy/scripts/ui/swisstournamentcontroller.js: redundant visualization code removed

	* core/scripts/rankingcomponentindex.js: KO ranking added

	* core/scripts/rankingdatalistenerindex.js: KO ranking added

	* core/scripts/rankingkocomponent.js: KO ranking added

	* core/scripts/rankingkolistener.js: KO ranking added, which mainly just adjusts the group of the loser after a lost match

	* legacy/scripts/ui/strings.js: KO ranking texts added

	* core/scripts/listmodel.js: improved restore() failure handling

	* core/scripts/main.js: improved Storage restore handling

	* core/templates/splash.html: improved state load error messages

	* legacy/scripts/ui/state.js: proper error handling after restore()

	* legacy/scripts/ui/statemodel.js: proper error handling during restore()

	* legacy/style/splash.css: error text looked horrible

	* core/templates/hometab.html: donate-button at the bottom of the home screen.

2015-09-10	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/matchmodel.js: support for 'undefined' team IDs (indicate empty teams, which are no byes though)
	save()/restore() of 'undefined' team IDs
	isRunningMatch() function: whether this match really is a valid match, not just a placeholder or a result

	* core/scripts/test/byeresult.js: testing isRunningMatch()

	* core/scripts/test/matchmodel.js: testing isRunningMatch()

	* core/scripts/test/matchresult.js: testing isRunningMatch()

	* legacy/scripts/ui/backgroundscripts/tabhistorycheaphacklistener.js: showing history when the first match is added, not just the first result

	* legacy/scripts/ui/matchview.js: using isRunningMatch() to show/hide the 'finish' inputs
	placeholder teams: estimating the correct size

	* core/scripts/kotournamentmodel.js: first working version
	seting state to 'finished' when the last match is through

	* core/scripts/test/kotournamentmodel.js: rudimentary tests. Nothing important, still mostly utility functions

	* legacy/scripts/ui/matchtableview.js: add superclass.destroy() call, which has been forgotten

	* legacy/scripts/ui/generictournamenthistoryview.js: JSDoc comments and normal comments added
	KOTreeView added for KOTournamentModels (system: 'ko')
	KOTreeView -> KOHistoryView

	* legacy/scripts/ui/gamestab.js: using shared tab options

	* legacy/scripts/ui/historytab.js: using shared tab options

	* legacy/scripts/ui/newtab.js: using shared tab options

	* legacy/scripts/ui/rankingtab.js: using shared tab options

	* legacy/scripts/ui/settingstab.js: using shared tab options

	* legacy/scripts/ui/statemodel.js: providing shared tab options

	* legacy/scripts/ui/teamstab.js: using shared tab options

	* core/templates/historytab.html: added {{kotree}} dependency
	extracted tournamentlist.html

	* core/templates/kotree.html: preliminary kotree structure copied from matchtable.html
	proper ko tree definitions added
	.kolineanchor added as an Anchor for the KO line lists
	kotree is a BoxView

	* legacy/style/kotree.css: preliminary kotree rules copied from matchtable.css
	KO Tree rules added (table-based)
	KO matches are now absolute-positioned
	.koline is handled separately
	input elements are properly aligned
	black border removed

	* legacy/scripts/ui/kolistmodel.js: group the matches for first and third place together
	This gives a more compact view

	* legacy/scripts/ui/kotreeview.js: simple KOTreeView added, which currently only invokes a MatchTableView for preliminary testing
	ListView of KO matches
	resizing the "forest" to match the tree width and height
	complexity reduced by using KOTreePosition
	using .kolineanchor and a second ListView just for the KOLines
	KOTreeView includes a BoxView
	showing '.bestrank' information

	* core/templates/komatchresult.html: KOMatchResult structure added
	using a table for kotree
	using ko-specific versions of 'finish' and 'correct', where the buttons are hidden for spatial reasons
	score is vertically distributed and horizontally aligned

	* core/templates/koteam.html: a single team, as shown in the KOTournament
	using a table for kotree

	* core/templates/tournamentlist.html: extracted from historytab.html

	* legacy/style/history.css: hiding .kotree when match table is required
	* legacy/scripts/ui/kohistoryview.js: That's a ListView for KOTreeModels from a KOListModel

	* legacy/scripts/ui/komatchresultview.js: MatchResultView, which arranges itself in the KOTree
	automatically positioning the KO matches where they belong
	using KOTreePosition for the positioning
	KOLine code moved to KOLineView

	* legacy/scripts/ui/matchresultview.js: JSDoc comment added

	* legacy/style/matchtable.css: missing semicolon added

	* legacy/scripts/ui/kotreeposition.js: dedicated calculation class: determines the tree position of a KO match

	* legacy/scripts/ui/kolineview.js: a View just for KOLines. It's easier this way

2015-09-09	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/inlinelistview.js: InlineListView: append BEFORE the $view, not at its END

	* legacy/scripts/ui/listview.js: InlineListView support added

	* core/templates/progresstable.html: columns rearranged
	separators added

	* legacy/scripts/ui/progressrowview.js: using InlineListView for the matches, in order to append the ranks AFTER the matches

	* legacy/scripts/ui/progresstableview.js: using InlineListView for the "round headers"

	* legacy/style/progresstable.css: .separator class added for better control

	* core/scripts/kotournamentmodel.js: utility functions for binary tree traversal added
	initialRoundFromTeams() utility function added
	creating some initial matches
	defaulting to 'wins' ranking for now. Let's fix it later
	using default bye points for byes.

	* core/scripts/test/kotournamentmodel.js: testing the utility functions
	testing initial matches with default mode

	* core/scripts/test/tournamentindex.js: expected 'ko' result corrected (it works now!)

	* core/scripts/tournamentindex.js: KOTournamentModel added

	* core/templates/newtab.html: enabling ko tournament run button

	* legacy/scripts/ui/generictournamenthistoryview.js: using .hastable class to control visibility

	* legacy/style/history.css: using .hastable class to control visibility

2015-09-08	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/binningreferencelistmodel.js: bin creation race conditions fixed: the bin was empty for a split second

	* legacy/scripts/ui/matchview.js: an 'undefined' teamid prints nothing. That's great for KO tournaments :-)

2015-09-07	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/reversematchreferencemodel.js: MatchReferenceModel, but with reversed teams

	* legacy/scripts/ui/reverseresultreferencemodel.js: ResultReferenceModel, but with reversed teams
	also reversing the score, not only the team

	* core/scripts/tournamentmodel.js: using hasReversedTeams to correct scores for reversed teams

	* legacy/scripts/ui/progresslistmodel.js: a ListModel subclass which contains all relevant information for a ProgressTableView

	* core/templates/historytab.html: 'showtable' checkbox is initially checked

	* core/templates/progresstable.html: second hidden teamno to avoid printing the first teamno (=== the row's team)
	rank moved towards the front of the progress table

	* legacy/style/progresstable.css: rounds are separated by black borders

	* legacy/scripts/ui/generictournamenthistoryview.js: passing groups through (i.e. the BinningReferenceListModel which separates the match groups)

	* legacy/scripts/ui/progressroundview.js: showing the respective round in the table header

	* legacy/scripts/ui/progressrowview.js: using ProgressListModel instead of a simple team list

	* legacy/scripts/ui/progresstableview.js: show round in the table headers
	instantiate ProgressListMOdel

	* legacy/scripts/ui/tournamenthistoryview.js: passing groups (BinningReferenceListModel) to the GenericTournamentHistoryViews

	* core/scripts/combinedreferencelistmodel.js: Properly handling concurrency conditions after detecting a length-related error

	* core/scripts/test/combinedreferencelistmodel.js: testing the concurrency conditions for reference lists

	* core/templates/correctionform.html: capitalized button labels

	* core/templates/teamstab.html: "delete all" button added

	* legacy/scripts/ui/deleteallteamscontroller.js: "delete all" button logic and confirmation added

	* legacy/scripts/ui/strings.js: "delete all" confirmation text added

	* legacy/scripts/ui/teamstab.js: binding DeleteAllTeamsController

	* legacy/style/teams.css: "delete all" button rules

2015-09-06	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/historytab.html: "Click score to correct a result" note added

	* core/templates/rankingtab.html: "abbreviate" -> "Abbreviations"

	* core/scripts/sortedreferencelistmodel.js: 'unique' parameter added and implemented

	* core/scripts/test/sortedreferencelistmodel.js: testing the 'unique' parameter

	* core/scripts/binningreferencelistmodel.js: improved sort function, which handles numbers and strings properly
	bins are a ListModel instance now, using a SortedReferenceListModel
	getBinNames() added, which exposes the sorted list of bins

	* core/scripts/matchreferencemodel.js: missing teamlist? Then don't change the team ids, just reference the whole match.

	* core/templates/progresstable.html: simpler progress table header: "round ##"

	* core/scripts/tournamentmodel.js: more complex correct() checks, which also support deep nesting of MatchResults, including reversed match result references

2015-09-05	Erik E. Lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/legacyloadermodel.js: Rudimentary tournament loading code
	restoring state, matches, history, byes, ranking and round
	TODO and console errors resynced

	* legacy/scripts/ui/listview.js: $subview != subview.$view - Bugs fixed by referencing all $subviews in a separate array
	subviews/$subviews typo fixed
	reverting to 'this.$view === $view' contract (View class)

	* legacy/scripts/ui/matchtableview.js: MatchTableView is composed of a ListView, not inheriting one.
	This keep the contract of 'this.$view == $view'
	unused constructor arguments removed
	auto-initialize TeamTableView
	$correction parameter removed: It's already present in the $view
	$rowtemplate parameter removed: Just use $view.find() and a TemplateView

	* legacy/scripts/ui/tournamenthistoryview.js: MatchResultView is referenced by MatchTableView
	TeamTableView dependency removed
	MatchTableView: $correction parameter removed
	MatchTableView: $rowtemplate parameter removed
	Inheriting from View, not TemplateView

	* legacy/scripts/ui/teamtableview.js: header comment typos fixed

	* core/templates/swissoptions.html: option texts updated (#155)

	* core/templates/gamestab.html: using {{matchtable}}
	matchlist removed

	* legacy/style/games.css: .matchview removed
	.matchtable extracted to matchtable.css
	input styling moved to matchtable.css
	hiding the result column during printing

	* legacy/style/history.css: .matchtable extracted to matchtable.css
	.finish and .correct rules moved to matchtable.css
	.noprint moved to .general.css

	* legacy/style/matchtable.css: .matchtable extracted from games.css and history.css
	.finish and .correct rules moved here

	* legacy/scripts/ui/gamestab.js: 'show table'-option removed

	* legacy/scripts/ui/tournamentmatchesview.js: matchlist removed
	using MatchTableView for matchtable
	MatchTableView: $correction parameter removed
	MatchTableView: $rowtemplate parameter removed

	* core/templates/correctionform.html: simplified div hierarchy

	* core/templates/finishmatchform.html: form replaced with divs

	* core/templates/historytab.html: correction templates removed

	* core/templates/matchtable.html: .finish and .correct pseudo-forms are included directly

	* legacy/style/general.css: disabled buttons have grey text
	.noprint rules moved here

	* legacy/scripts/ui/historytab.js: unrelated comments removed

	* legacy/scripts/ui/matchview.js: input field zeroing is left to the controller
	removing $finish if this.model is not a running match

	* legacy/scripts/ui/matchresultview.js: finding $result, $correctionform and $scores
	removing the .result and .correct based on the match type (MatchModel/MatchResult/ByeResult)

	* legacy/scripts/ui/matchcontroller.js: $form parameter allows for reuse of the logic

	* legacy/scripts/ui/matchresultcontroller.js: inheriting from MatchController to avoid code duplication

	* legacy/style/ranking.css: maxwidth-checkbox works

	* legacy/style/rankingview.css: larger paddings for table cells
	removed

	* core/templates/rankingtab.html: 'showtable'-checkbox removed
	'abbreviate'-checkbox added

	* legacy/scripts/ui/checkboxview.js: autoformatting

	* legacy/scripts/ui/rankingtab.js: abbreviate checkbox logic added
	ranking tables depend on the 'abbreviate' value

	* legacy/scripts/ui/tournamentrankingview.js: passing the abbreviate value through to RankingView

	* legacy/scripts/ui/rankingview.js: using the localized strings instead of component names
	respecting the abbreviate value
	auto-redraw on player name change

	* legacy/scripts/ui/strings.js: medium ranking strings added as an alternative to abbreviations

	* test/rankingview.html: test extended to provide the 'abbreviate' parameter

	* legacy/scripts/ui/backgroundscripts/tabhistorycheaphacklistener.js: showing history tab even when only running matches are available

	* core/style/table.css: larger paddings for all table cells

	* legacy/scripts/ui/tournamentview.js: '.idle' advanced options are also boxviewed

	* core/templates/progresstable.html: re-using the matchtable children

	* legacy/style/progresstable.css: almost direct copy of matchtable.css for the same reasons

	* legacy/scripts/ui/progressrowview.js: a single row of the progress table

	* legacy/scripts/ui/progresstableview.js: a ListView of ProgressRowViews added

2015-09-04	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/legacyloadermodel.js: a parser for pre-1.5 savestates
	options are loaded
	teamsize if loaded

	* legacy/scripts/ui/state.js: using a legacyloadermodel to parse old

2015-08-30	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/tournamenthistoryview.js: using distinct tables for different rounds/groups
	using matchtableview to also enable displaying the group id
	using a generictournamenthistoryview to initiate the progress tables

	* legacy/scripts/ui/listview.js: using the actual $subview, not subview.$view, since the subview has to take care of dom bookkeeping.

	* core/templates/historytab.html: matchtable nested in a div, along with a "round" text
	matchtable moved to its own file
	'hidefinished'-checkbox added

	* legacy/style/general.css: matchview removed

	* legacy/style/history.css: div.matchtable can be aligned on the same line, since they only show a single round
	.hidefinished rules added
	hiding progresstable when matchtable is wanted

	* legacy/scripts/ui/matchtableview.js: listview for matchresult lists, which also displays the group of the first match
	this should be used in conjunction with grouping by group ids
	setting .running for running groups
	setting .finished for finished groups

	* core/scripts/swisstournamentmodel.js: group id for all matches corrected (was one too low)

	* core/scripts/combinedreferencelistmodel.js: combinedreferencelistmodel appends multiple lists into a single one

	* core/scripts/test/combinedreferencelistmodel.js: testing combinedreferencelistmodel

	* core/scripts/matchmodel.js: isresult() added to determine whether `this` is a result or a match

	* core/scripts/matchresult.js: isbye() checks isresult()

	* core/scripts/resultreferencemodel.js: if used by tournament.getcombinedhistory(), the matchmodel instances would be cast to matchresult instances.
	the fix in this commit makes the isresult() function return 'false' for matches, but 'true' for results.

	* legacy/scripts/ui/matchresultview.js: check isresult() before showing score or initializing the controller

	* legacy/scripts/ui/rankingview.js: rank multiplicity is possible again.

	* legacy/scripts/ui/fileloadcontroller.js: controller for loading from files
	when loading from a file, all "clear"-toasts will be closed.
	resetting the input after every action ensures that the same file can be loaded multiple times in a row

	* legacy/scripts/ui/settingstab.js: using fileloadcontroller

	* legacy/scripts/ui/toast.js: toast.closetemporarytoasts() added to remove all previous toasts

	* core/templates/matchtable.html: contains matchtable, which was previously embedded into historytab.html
	using {{resultscore}}

	* core/templates/progresstable.html: simple progress table added for swiss and round
	using {{resultscore}}
	progresstable is '.hidden' by default, not '.template'

	* legacy/scripts/ui/historytab.js: checkbox logic for .hidefinished added
	setting '.showmatchtable' when '.showtable' checkbox is unchecked

	* legacy/scripts/ui/matchview.js: only instantiating the matchcontroller for actual matchmodels, not matchresults

	* core/templates/correctionform.html: correction form extracted from historytab.html

	* core/templates/finishmatchform.html: 'finish match'-form extracted from gamestab.html

	* core/templates/resultscore.html: typical score display

	* legacy/scripts/ui/generictournamentview.js: critical destroy() bug fixed
	unused variable removed

	* legacy/scripts/ui/generictournamenthistoryview.js: dynamically instantiate different history output types (ko, progresstable, ...)

	* legacy/scripts/ui/progresstableview.js: placeholder code for instantiating the progress tables

	* tools/analyze.sh: moved to plato-gh-pages.sh

	* tools/plato-gh-pages.sh: auto-commit after plato parse

2015-08-28	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/binningreferencelistmodel.js: initialization from non-empty list used the elements as indices

	* core/scripts/test/binningreferencelistmodel.js: testing the element-index bug scenario

	* tools/analyze.sh: appending to existing plato repository (currently in debug mode)
	epoch / human-readable date confusion fixed
	eof error and too verbose output fixed
	comparison typo fixed
	traversing and restoring develop branch
	debug mode disabled.

2015-08-27	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/sortedreferencelistmodel.js: an auto-sorting listmodel which draws its elements dynamically from another listmodel

	* core/scripts/test/sortedreferencelistmodel.js: testing sortedreferencelistmodel

	* core/scripts/tournamentmodel.js: using sortedreferencelistmodel to sort gethistory() and getmatches()

	* core/scripts/test/roundtournamentmodel.js: testing the sort order of concurrently running matches

	* core/scripts/binningreferencelistmodel.js: a binning model, which allows the grouping of similar items from another list
	the items are stored in sublists, so the list yields a 2d structure

	* core/scripts/test/binningreferencelistmodel.js: testing binningreferencelistmodel

2015-08-26	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/debugtab.html: .round -> .finishround

	* legacy/scripts/ui/debugtab.js: invoking finishroundcontroller

	* legacy/scripts/ui/finishroundcontroller.js: finishing a round with the maximum number of points

2015-08-24	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/historytab.html: correction form replaced with div
	correction: .points -> .score

	* legacy/scripts/ui/correctioncontroller.js: replaced with matchresultcontroller

	* legacy/scripts/ui/matchcontroller.js: unused assignment removed

	* legacy/scripts/ui/matchresultcontroller.js: replacement for correctioncontroller
	handles correction of the match

	* legacy/scripts/ui/matchresultview.js: initiates matchresultcontroller
	matchresultcontroller requires a lot of variables

	* legacy/scripts/ui/teamnamecontroller.js: enter/escape comments added for later reference

	* legacy/scripts/ui/tournamenthistoryview.js: passing additional parameters to matchresultview
	not using correctioncontroller anymore

	* legacy/style/history.css: dynamic visibility of .result and .correct
	.result is always printed!

	* core/templates/abouttab.html: amazon wishlist removed

	* tools/codestyle.sh: dev/ excluded from codestyle-corrections

	* legacy/scripts/ui/hometab.js: hometab added
	'clear tournaments'-button added
	state-clear toast moved to statetoasts.js

	* legacy/scripts/ui/backgroundscripts/autosave.js: auto-saving on state clear

	* legacy/scripts/ui/backgroundscripts/stateerrortoasts.js: moved to statetoasts.js

	* legacy/scripts/ui/backgroundscripts/statetoasts.js: moved from stateerrortoasts.js
	showing 'clear'-toasts after the state has been cleared

	* legacy/scripts/ui/statemodel.js: emitting 'clear' at the end of a clear() call

	* core/templates/debugtab.html: 'register teams' classes changed to more meaningful names than 'submit'

	* legacy/scripts/ui/debugtab.js: 'register teams' button logic enabled
	initializing the 'mods' variable

	* legacy/scripts/ui/registerteamscontroller.js: 'register teams' button enabled

	* legacy/scripts/ui/requiremodsshortcut.js: class for initialization of the global 'mods' variable.
	not disabled during production to ease live debugging

2015-08-21	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/matchview.js: teamid of anonymous teams is increased by 1 to get the team number

2015-08-16	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/toast.js: toast rewritten to ensure correct close() behaviour

	* tools/index-from-template.sh: template parser reads from the shared strings file, too

	* core/templates/teamstab.html: deletion prompt added as a small helper
	spieler laden -> anmeldungen laden

	* legacy/scripts/ui/strings.js: deletion prompt texts added

	* legacy/style/teams.css: showing deletion prompt only in deletion mode

	* legacy/scripts/ui/teamremovecontroller.js: showing deletion toast in deletion mode (secondary deletion prompt)

	* core/style/fontsize.css: input element font size has been increased by ~50%

	* legacy/style/general.css: removed all padding around input elements

	* legacy/scripts/ui/teamnamecontroller.js: namechange prompt toast added while namechange mode is active

	* core/templates/newtab.html: missing input elements added
	todo box removed
	maastricht box removed

	* core/templates/newtabtodo.html: removed

	* tac/templates/newtabtodo.html: removed

	* legacy/scripts/ui/tournamentcontroller.js: showing namechange info toast when changing subtournament name
	applying name change for newly created tournaments

	* legacy/scripts/ui/newtournamentcontroller.js: trigger name change for newly created tournaments

	* core/templates/settingstab.html: savedate information added
	storage meters removed
	"load autocompletion file" dialog removed. wasn't useful anyway
	"nojson" removed. there's a polyfill for that, and we don't support such old browsers anyway.
	link to the unit tests removed. use the main index to reach them.

	* legacy/scripts/ui/settingstab.js: settingstab
	show when the state was last saved to storage
	binding the save storage-button

	* legacy/scripts/ui/storage.js: formatting savedate
	date format includes leading zeroes for the hours, minutes and seconds

	* core/templates/swissoptions.html: "begegnungen setzen": checkbox is on the left of the text

	* core/scripts/main.js: hiding the tabs on load error

	* legacy/style/splash.css: using z-index to display splash on top of the still invisible tabs

	* legacy/scripts/ui/storagesavecontroller.js: manually save the state to localstorage and raise a toast about it

2015-08-14	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/abouttab.html: list of mobile browsers removed: cannot test them at the moment

	* core/templates/debugtab.html: number of buttons reduced. not all of them make sense anymore
	browser information box added
	table with browser information
	browserinfo update button: #update -> .update

	* lib/normalize.css: library for style normalization across browsers

	* tools/write-mainstyle.sh: loading files from the lib/ directory, too

	* tools/create-commonjs.sh: libraries are loaded first

	* lib/es5-shim.js: ecmascript 5 polyfill, mainly for for ie8

	* tools/install-libs.sh: auto-updating es5-shim
	explicitly using version 1 of jquery (ie-compatible)

	* legacy/scripts/ui/debugtab.js: replacement for tab_debug started
	showing browser name and version
	clear all-button works
	showing all loaded images
	using browserinfoview for browser information

	* makefile: `make dev` doesn't reset the dev-index to the original version
	removing the travis config file for releases

	* lib/jquery.js: reverted to version 1

	* lib/object-create-polyfill.js: polyfill for object.create

	* legacy/scripts/ui/browser.js: browser identification capabilities added
	regex typo fixed
	debugging output: browser name and version
	update() function added
	also collects the online, local and cached information

	* core/scripts/main.js: aborting on old internet explorer
	typo fixed: ie -> msie

	* core/templates/splash.html: oldinternetexplorer text added
	splash screen texts condensed

	* legacy/scripts/ui/splash.js: oldie() function added to show oldinternetexplorer text

	* legacy/style/splash.css: oldinternetexplorer rules added

	* legacy/scripts/ui/loadedimagesview.js: a view which locates and displays all images

	* legacy/scripts/ui/backgroundscripts/online.js: don't manage the update button anymore

	* legacy/scripts/ui/browserinfoview.js: display browser identification and status
	using the browserinfocontroller

	* tools/create-ui-class.sh: using the correct core directory

	* legacy/scripts/ui/browserinfocontroller.js: browser info update button works

2015-08-07	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* selenium-tests/makefile: auto-downloading libraries if necessary

2015-08-03	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* .gitignore: ignoring dev/

	* makefile: `make dev` added for dev-builds
	using `git rev-parse` since `git show-ref` doesn't always work
	`make clean` includes dev/ and selenium-tests (via make invocation)

	* selenium-tests/makefile: `make clean` removes lib/

2015-08-02	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* test/selenium-tests/update-selenium.sh: works with msysgit, i.e. under windows (tested with win7)

	* test/selenium-tests/src/tuverotestrunner.java: allowing the use of internet explorer

2015-08-02	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* test/boxview.html: adding '.generated' class to the generated boxview for easier debugging

	* test/selenium-tests/java/src/tacindex.java: chrome need to wait three seconds for the tac index for some reason

	* test/selenium-tests/java/src/tuverotestrunner.java: equal() and notequal() use generic types
	this ensures the same behaviour for string and integer comparison
	if the comma-separated tests environment variable is set, tests not in this list are skipped

	* test/selenium-tests/java/src/unittests.java: comparing integer values of the unit test successes

	* test/selenium-tests/java/src/boxview.java: testing the boxview test page
	test: focus-loss on collapsing
	testing auto-growth of boxviews
	major cleanup of the test

	* test/selenium-tests/java/src/testindex.java: checking the availability of links to other test pages

	* test/selenium-tests/java/src/bouleindex.java: also waiting up to 3 seconds for consistency

	* test/selenium-tests/java/makefile: force-removing all classes and pngs

	* test/selenium-tests/java/maketuverotestlist.sh: don't show the output. it's proven to work.

	* makefile: run-selenium-tests -> selenium-tests

	* tests/selenium-tests/java/: moved to selenium-tests/

	* selenium-tests/: moved from tests/selenium-tests/java/

	* selenium-tests/src/tuverotestrunner.java: relative path to root directory adjusted
	sleepmilliseconds() function added
	equal() and notequal() can now handle null arguments
	navigate() works with hashes: it changes only the hash
	navigate() prints the pageload status
	navigate() detects timeouts and unwanted reloads

	* test/selenium-tests/node/: removed in favor of the java version

	* selenium-tests/src/checkboxview.java: checkboxview test added
	also testing clicks on the text right next to the checkbox

	* test/checkboxview.html: the checkbox is inside a span element, for consistency with the tuvero taboptions

	* selenium-tests/src/listview.java: testing the listview test page

	* selenium-tests/src/rankingorderview.java: testing the rankingorderview

	* selenium-tests/src/rankingview.java: testing rankingview

	* selenium-tests/src/tabmenuview.java: testing tabmenuview

	* test/tabmenuview.html: frequency of the periodically forbidden tab increased for faster ui tests

2015-08-01	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* test/selenium-tests/java/makefile: paths adjusted

	* test/selenium-tests/java/maketuverotestlist.sh: paths adjusted

	* test/selenium-tests/java/src/tuverotest.java: interface for tuvero tests

	* test/selenium-tests/java/src/tuverotestlist.java: auto-generated list of selenium-driven tests

	* test/selenium-tests/java/src/tuverotestrunner.java: main test runner and test-helper class
	output and test error handling improved
	geturl() added to create a local url
	navigate() automatically waits for pageload
	error/success output matches that of qunit.

	* test/selenium-tests/java/src/tuverounittests.java: old selenium test removed

	* test/selenium-tests/java/src/unittests.java: first actual selenium test

	* test/selenium-tests/java/src/bouleindex.java: open boule index and see if the main script loads (hides the splash screen)

	* test/selenium-tests/java/src/index.java: load index. no further checks yet.
	further checks: verifying that all links are present

	* test/selenium-tests/java/src/tacindex.java: open tac index and see if the main script loads (hides the splash screen)

2015-07-31	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* makefile: `make run-selenium-tests` added
	using java version of selenium-tests

	* test/selenium-tests/tests/openboule.js: wrong parentheses fixed

	* test/selenium-tests/tests/opentac.js: wrong parentheses fixed

	* test/selenium-tests/*: moved to test/selenium-tests/node/
	nodejs-based browser tests

	* test/selenium-tests/java/: java-based browser tests

	* test/selenium-tests/java/update-selenium.sh: downloading and installing chromedriver

	* test/selenium-tests/java/makefile: adding the library to path just before execution
	no need for path variable anymore. that's handled by the java code.

	* test/selenium-tests/java/src/tuverounittests.java: handling the path-equivalent of the chromedriver executable

	* legacy/scripts/*: requirement on most legacy ui/tabbing code removed

2015-07-30	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* test/selenium-tests/common/runtest.js: testrunner nodejs source file for selenium tests

	* test/selenium-tests/common/testtools.js: additional set of tools for selenium tests

	* test/selenium-tests/.gitignore: ignoring temporary files

	* test/selenium-tests/runtest.sh: testrunner script for selenium tests

	* test/selenium-tests/tests/openboule.js: test where tuvero boule is opened

	* test/selenium-tests/tests/opentac.js: test where tuvero tac is opened

	* test/selenium-tests/tests/openindex.js: test where the tuvero index is opened

2015-07-27	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* makefile: `make lib` added
	`make links` added

	* tools/install-libs.sh: installing libraries using bower
	output improved
	looking for local bower installation

	* .travis.yml: installing bower prior to build process

	* tools/verify-links.sh: find all links in html files and see if they're still online

2015-07-25	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/swisstournamentmodel.js: local functions made into static methods (for testing)
	error output differentiates between bye- and bye-less backtracks
	backtracking functions renamed
	errors are emitted from the class instance again.
	backtracking algorithm cornercase fixed: last two teams have already played

	* core/scripts/test/swisstournamentmodel.js: testing some internal functions
	tests extended to test wm2015-tac-bug

	* legacy/scripts/ui/tab_debug.js: debugging-tab: startround and finishround buttons work again

2015-07-22	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/abouttab.html: https://boules-dev.appspot.org -> https://tuvero.dev/dev/
	https://boulesdb.appspot.com/issues -> http://fehler.tuvero.de

	* index.html: https://boulesdb.appspot.com/issues -> http://fehler.tuvero.de

2015-07-19	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/statemodel.js: showing error when the wrong target is loaded
	error when the wrong format is loaded

	* legacy/scripts/ui/backgroundscripts/stateerrortoasts.js: showing a toast on statemodel errors

	* core/scripts/byeresult.js: byeresult added for easy bye calculations

	* core/scripts/test/byeresult.js: testing byeresult
	testing isbye()

	* test/scripts/test.js: testing construction and save/restore of byeresult

	* core/scripts/roundtournamentmodel.js: adding byeresult to history
	bye has not been added to ranking

	* core/scripts/rankingsonnebornlistener.js: does sonneborn include a bye-related win of the opponent?

	* core/scripts/test/roundtournamentmodel.js: byes are included in the result. take sonneborn with a grain of salt

	* core/scripts/matchresult.js: isbye() added

	* core/scripts/test/matchresult.js: testing isbye()

	* core/scripts/matrixmodel.js: storing the length separately, because matrixmodel.data is compact and omits empty rows

	* core/scripts/rankingwinscomponent.js: reformatting

	* core/scripts/test/matrixmodel.js: testing length after restore()

	* core/scripts/test/rle.js: additional tests added during debugging

	* legacy/scripts/ui/matchview.js: handling byeresults, too
	jsdoc comment updated
	correctionview + correctioncontroller added

	* legacy/scripts/ui/strings.js: byename and byeid added
	defaultnameroundtournament -> defaultnameround

	* legacy/scripts/ui/teamview.js: handling textual ids properly (e.g. for byes: 'f' instead of a team number)

	* core/templates/historytab.html: placeholders for match results added
	correction fields added
	separate vote-lists removed
	unwanted noprint classes removed (we want to print!)

	* legacy/scripts/ui/matchresultview.js: displaying a match result with its score

	* legacy/scripts/ui/tournamenthistoryview.js: using matchresultview
	initializing corrections
	separate vote-lists removed
	auto-updating the tournament name

	* legacy/scripts/ui/matchcontroller.js: select on focus for easier handling
	ties can be allowed (optionally)
	ties with max points can optionally be forbidden
	using jquery select() instead of the browser-supported version

	* boule/scripts/options.js: tiesforbidden added
	maxpointtiesforbidden added

	* tac/scripts/options.js: tiesforbidden added
	maxpointtiesforbidden added

	* test/scripts/options.js: tiesforbidden added
	maxpointtiesforbidden added

	* core/scripts/swisstournamentmodel.js: creating groups with the same rank when starting a new round
	randomizing the rankgroups
	using new backtracking algorithm to generate matches
	different modes added (not tested yet)
	swisstranspose-option and code added
	property: swissshuffled -> swissshuffle
	bye traversal starts in the last team in the last group

	* core/scripts/rankingbyelistener.js: number of byes: ranking.byelistener added (for swisstournament)

	* core/scripts/rankingdatalistenerindex.js: rankingbyelistener added to index

	* core/scripts/tournamentmodel.js: reading the external ranking dependencies from rankingdependencies
	correct() bug fixed (undefined values, forgotten "this")
	name and getname() added to remember the name of the tournament

	* legacy/scripts/ui/backgroundscripts/taboptionclick.js: replaced by checkboxcontroller

	* legacy/scripts/ui/checkboxcontroller.js: clicking a parent span delegates the click to the checkbox

	* core/templates/newtab.html: using {{swissoptions}} to share between idle and initial state
	tournament name change input field added

	* core/templates/swissoptions.html: swisstournament options exported here

	* legacy/style/new.css: .votepermission removed
	.options margin added
	namechange input field styles added

	* core/templates/gamestab.html: tabindex=-1 removed from the finish-buttons

	* legacy/style/history.css: style of hidden match results added

	* legacy/scripts/ui/correctioncontroller.js: correctioncontroller for dynamically attaching/detaching a correction input field added

	* core/templates/rankingtab.html: correctiontable added

	* legacy/style/ranking.css: maxwidth and hidenames rules added
	* core/templates/correctiontable.html: correctiontable added

	* legacy/scripts/ui/correctionview.js: correctionview added for displaying a single correctiontable row

	* legacy/scripts/ui/tournamentrankingview.js: initializing correctiontable view

	* legacy/scripts/ui/newtournamentcontroller.js: tournament name is set to strings.defaultnamexxx

	* legacy/scripts/ui/tournamentmatchesview.js: updating tournament name

	* legacy/scripts/ui/tournamentview.js: updating tournament name

	* legacy/scripts/ui/backgroundscripts/autosave.js: saving on tournament name change

	* legacy/scripts/ui/tournamentcontroller.js: tournament title click -> tournament name change
	namechange: only the top title works as a trigger

2015-07-18	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/rankingview.js: rendering defered until all changes are accumulated
	initial update during construction (defered)

	* legacy/scripts/ui/systemlistview.js: rendering defered until all changes are accumulated

	* legacy/scripts/ui/systemtablerowview.js: rendering defered until all changes are accumulated

	* legacy/scripts/ui/gamestab.js: $view -> $container (variable was leaking into global object)

	* legacy/scripts/ui/historytab.js: $view -> $container (variable was leaking into global object)

	* legacy/scripts/ui/rankingtab.js: $view -> $container (variable was leaking into global object)

	* legacy/scripts/ui/matchcontroller.js: button enabled on keyup, not only on change, to visualize as you type

	* core/scripts/listmodel.js: support for construction with an array of elements added

	* core/scripts/uniquelistmodel.js: support for construction with an array of elements added

	* legacy/scripts/ui/rankingordercontroller.js: preventing left-right-scrolling when switching between lists

	* core/templates/newtab.html: rankingorderview added to swiss
	rankingorderview put outside of the tournamentoptions box
	dom elements are back in order. i messed something up.

	* core/templates/rankingorderview.html: changes from the test suite integrated

	* core/scripts/swisstournamentmodel.js: swisstournamentmodel added
	emitting 'error' on round-start errors

	* core/scripts/test/swisstournamentmodel.js: rudimentary swisstournamentmodel test added

	* core/scripts/test/tournamentindex.js: tests now also account for 'swiss', 'ko' and 'poule'

	* core/scripts/tournamentindex.js: swisstournamentmodel added

	* legacy/style/new.css: button styles adjusted

	* test/rankingorderview.html: instantiating the available ranking types directly

	* legacy/scripts/ui/generictournamentview.js: swisstournamentview added

	* legacy/scripts/ui/swisstournamentcontroller.js: swisstournamentcontroller added

	* legacy/scripts/ui/swisstournamentview.js: swisstournamentview added
	common code transfered to tournamentview

	* core/scripts/tournamentmodel.js: signalling internal failures by emitting 'error' with a message as data
	setrankingorder() added for redefining the ranking order as long as the tournament is in 'initial' state

	* legacy/scripts/ui/backgroundscripts/tournamenterrortoasts.js: showing toasts on any internal tournament error
	moved to tournamenterrortoasts.js

	* legacy/scripts/ui/newtournamentcontroller.js: default ranking set to wins

	* legacy/scripts/ui/rankingorderview.js: hiding pre-selected options on construction

	* legacy/scripts/ui/roundtournamentview.js: common code transfered to tournamentview

	* legacy/scripts/ui/tournamentcontroller.js: setting ranking order prior to starting the tournament

	* legacy/scripts/ui/tournamentview.js: sharing common code between all subclasses, e.g. roundtournamentview and swisstournamentview

	* core/templates/rankingtab.html: rankingview has been encapsulated into rankingview.html

	* core/templates/rankingview.html: encapsulated rankingview file

	* test/rankingview.html: rank -> platz

	* core/scripts/lengthmodel.js: lengthmodel added to passively mirror the length of a list

	* core/scripts/test/lengthmodel.js: testing lengthmodel

	* core/scripts/valuemodel.js: onupdate() conflict with tournamentlistmodel+lengthmodel circumvented

	* legacy/scripts/ui/teamstab.js: 'state.numtournaments' has been replaced with 'new lengthmodel(state.tournaments)'

	* legacy/scripts/ui/statemodel.js: statemodel is subclass of model
	statemodel.save() and statemodel.restore() added
	statemodel.saveformat also uses a version identifier
	saveformat contains the target ('tac', 'boule', ...)
	restore(): forgotten listmodel.restore() content constructor added (teammodel)
	actual data and cleanuplisteners separated
	clear() function added
	tournaments restore() bug fixed
	also saving/restoring the options

	* core/scripts/model.js: didn't load the type module properly
	more precise restore() error messages

	* legacy/scripts/ui/playermodel.js: save() and restore() added
	forgotten "this" added

	* legacy/scripts/ui/teammodel.js: save() and restore() added

	* legacy/scripts/ui/backgroundscripts/save.js: explicit jquery import added

	* legacy/scripts/ui/state.js: exclusively using state_new

	* legacy/scripts/ui/backgroundscripts/autosave.js: managing every autosave scenario

	* legacy/scripts/ui/backgroundscripts/redrawonplayerchange.js: moved to autosave.js

	* legacy/scripts/ui/savestate.js: removed and superseded by autosave.js

	* legacy/scripts/ui/options.js: no need to save/restore the teamsize within the options anymore

	* legacy/scripts/ui/backgroundscripts/matchtoasts.js: sending toasts for finishing matches and changing tournament states

	* legacy/scripts/ui/strings.js: tournament state strings added
	team csv texts revised

	* legacy/scripts/ui/teamsfileloadcontroller.js: dependency on team.js removed

	* legacy/scripts/ui/backgroundscripts/tournamenterrortoasts.js: `make codestyle`

	* legacy/scripts/ui/team.js: all code removed, except for the tocsv code

2015-07-17	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/gamestab.html: classes and lists adjusted to match mvc classes
	matchview style restored
	div/form order changed for better matchcontroller $view definitions
	matchtable added
	text changed (no. a/b -> no.)
	.noprint css class added for results column
	tags and classes of the vote lists adjusted to mvc formulation
	voteviews are essentially teamviews

	* legacy/scripts/ui/listview.js: optdata argument added to constructor, which will be passed through to the subview constructor
	listmodel doesn't usually send update events. this has lead to errors with tournamentlistmodel, which does, but for different reasons
	optional additional arguments (optargs, as many as you like) are supported by appending them to the argument list
	"new" keyword forgotten :-(

	* legacy/scripts/ui/tournamentmatchesview.js: represents a box inside the games tab, which contains match lists
	using teamtableview to hide unused teams columns
	using boxview for the tournamentmatchesview
	initmatches() method introduced to keep constructor clean
	initvotes() creates the vote lists
	initvotes() functionality restored after tag/class reordering

	* legacy/scripts/ui/gamestab.js: list of running tournament games (listview of tournamentmatchesview) added
	some minor autoformatting of comments
	matchtable initialization added
	passing state.teams to tournamentmatchesview's listview to hide extra teams

	* core/scripts/emitter.js: debugging output added (shows emit() recursion)
	warning about 'update' ambiguity added

	* core/scripts/tournamentmodel.js: using singletons for the getters to avoid listeners-bloat

	* legacy/scripts/ui/tournamentcontroller.js: comment + field added (makes eclipse realize it's a class, not just a function)

	* core/templates/newtab.html: input element removed to improve tabbing

	* legacy/style/games.css: matchview style restored
	styling matchtable
	table and input style adjusted. it looks great now
	input elements styled with one games-specific rule
	not printing .noprint elements
	voteview style adjusted to match that of matchview

	* legacy/scripts/ui/matchview.js: more input elements than teams? use the teams twice. as long as they're interlaced, we're fine
	support for teams without a common parent tag added (for matchtable rows, because <td>s can't be nested)
	using options.defaultscore as the default value for input elements

	* legacy/scripts/ui/matchcontroller.js: enable/disable submit button depending on values and ties

	* core/scripts/referencelistmodel.js: don't re-emit an event, the superclass already emits it.

	* core/scripts/test/referencelistmodel.js: testing how often an event is emitted.

	* legacy/scripts/ui/teamview.js: support for jquery elements without a common parent tag added (multiple teams in one <tr>)
	support for referencing a teamlist with an index added (to avoid an individual voteview for now)

	* legacy/style/general.css: teamno style doesn't apply to table cells
	matchlist: team number style restored
	autoformatting
	using the same style for "games" and "history"

	* boule/scripts/options.js: options.defaultscore = 0

	* tac/scripts/options.js: options.defaultscore = 8

	* test/scripts/options.js: options.defaultscore = 0

	* core/scripts/view.js: more specified error condition than "!$view" and "$view.length"

	* legacy/scripts/ui/teamstab.js: only showing the teamsizeview when the $container exists

	* legacy/scripts/ui/teamtableview.js: support for multiple teams in a single table row added
	it counts the consecutive occurences of th.playercol

	* core/scripts/maplistmodel.js: don't emit insert/remove twice

	* core/scripts/test/maplistmodel.js: testing whether insert/remove is re-emitted exactly once

	* legacy/scripts/ui/tournamenthistoryview.js: primitive list of a tournament history

	* legacy/scripts/ui/historytab.js: historytab added to show the tournament history

	* core/templates/historytab.html: format of gamestab adapted

	* legacy/style/history.css: copy of games.css. to be adjusted

	* legacy/scripts/ui/backgroundscripts/tabhistorycheaphacklistener.js: showing the history tab only if there's any tournament with a history

	* legacy/scripts/ui/backgroundscripts/tabrankingcheaphacklistener.js: showing the ranking tab only if there's a started tournament

	* core/templates/rankingtab.html: using rankingview to display the ranking

	* legacy/scripts/ui/rankingtab.js: ranking tab logic initializer added

	* legacy/scripts/ui/tournamentrankingview.js: collection of rankingview and a correctionview-containing listview

2015-07-16	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/newtab.html: .idle class added
	bottom-title (second h3) added to 'round'

	* legacy/style/new.css: .idle class added

	* legacy/scripts/ui/tab_games.js: removed from the dependency chains

	* legacy/scripts/ui/strings.js: tab_games string changed to "laufende spiele"

	* core/templates/gamestab.html: gamestab classes changed

	* legacy/scripts/ui/teamstab.js: teamstab file reformatted

	* legacy/scripts/ui/gamestab.js: gamestab added

	* legacy/scripts/ui/backgroundscripts/tabgamescheaphacklistener.js: show/hide #games when no tournament is running

2015-07-15	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/newtab.html: "system" templates use a data-system attribute to denote their respective tournament system
	newtournament buttons: data-system attributes added
	newtournament buttons re-arranged
	"best n players" input box removed. re-introduce when needed
	.system .name -> .tournamentname (tournament name class is unique)

	* legacy/scripts/ui/generictournamentview.js: constructor takes a tournament instance now
	create roundtournamentview for 'round'-tournaments

	* legacy/scripts/ui/generictournamentviewfactory.js: factory for generictournamentviews
	holds some persistent data so it doesn't have to be passed one-by-one
	loading a newtournamentview if the tournament doesn't exist
	create() function signature changed to use the list of tournaments again (newtournamentview needs it)
	renamed to tournamentviewpopulator. doesn't instantiate the tournaments anymore

	* legacy/scripts/ui/newtab.js: instantiating generictournamentviewfactory
	tournamentviewpopulator renaming
	names maxwidth checkbox functionality added
	hidenames checkbox functionality added

	* legacy/scripts/ui/systemlistview.js: passing generictournamentviewfactory through

	* legacy/scripts/ui/systemtablerowview.js: using generictournamentviewfactory
	using newtournamentview when a tournament doesn't exist
	using tournamentviewpopulator before instantiating any tournamentview
	rowspan calculations were incorrect (nan) for only one tournament with all players. fixed it.

	* legacy/scripts/ui/newtournamentview.js: empty constructor added. rest will follow
	firstid -> firstteamid

	* core/scripts/tournamentindex.js: jsdoc for createtournament() added

	* legacy/scripts/ui/newtournamentcontroller.js: controller for button-clicking
	typo fixed
	creating tournaments and filling them with teams. works good enough for now.

	* legacy/scripts/ui/tournamentviewpopulator.js: renamed from generictournamentviewfactory
	doesn't create tournamentviews anymore, only populates the $views

	* legacy/style/new.css: .preparing -> .initial
	hidenames rules revisited (.playercol added)
	maxwidth rules revisited

	* legacy/scripts/ui/tournamentcontroller.js: '.runtournament'-button-click --> create new tournament

	* legacy/scripts/ui/tournamentview.js: show the tournament name (its system for now)

	* core/scripts/roundtournamentmodel.js: getround() added

	* legacy/scripts/ui/roundtournamentview.js: showing the current and next round

2015-07-13	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* .travis.yml: travis ci yaml file added
	apt: find -> findutils
	trying to move to the container architecture of travis
	`make update` is no part of the build process
	language: bash
	npm install requirejs, not r.js

	* tools/build.sh: searching for r.js in the local path, too
	npm: using local r.js path. granting write access, if necessary
	build: using nodejs/node executable directly
	node is used implicitly again, to enable direct 'r.js' calls

	* .gitignore: node_modules added

	* readme.md: travis badge added to readme

	* core/scripts/orderlistmodel.js: using a diff to determine the lowest number of insert/remove operations prior to moving the elements
	autoformatted due to using emacs instead of eclipse

	* core/scripts/test/orderlistmodel.js: reference orders corrected

	* lib/diff.js: the diff.js diff library is provided by kpdecker on github: https://github.com/kpdecker/jsdiff

	* lib/license_diffjs.txt: diff.js license added

	* core/scripts/rankingcomponentindex.js: .components property lists the names of all components

	* test/rankingorderview.html: getting names of components from rankingcomponentindex.components
	order of selected/available lists switched

	* legacy/scripts/ui/rankingordercontroller.js: left/right list switched
	moveleft/moveright renamed to something more specific

	* legacy/scripts/ui/rankingorderview.js: left/right list switched

	* core/templates/rankingorderview.html: cleanup

	* core/scripts/test/tournamentlistmodel.js: testing new getglobalranking features
	getglobalranking: passing the number of teams, not a list of teams

	* core/scripts/tournamentlistmodel.js: getglobalranking also returns tournamentoffsets
	tournamentids for tournament-less teams are set to undefined
	using a cache to avoid massive recalculations of the global ranking
	getglobalranking takes the number of teams, not the list of teams anymore
	variables/fields moved within getglobalranking()

	* legacy/scripts/ui/systemtablerowview.js: caching the rank and only updating if it differs
	using the tournament offsets to insert the tournament columns
	css class typo fixed: i accidentally typed the dot in jquery
	testing tournamentview
	using generictournamentview instead of tournamentview

	* legacy/scripts/ui/systemlistview.js: passing the number of teams instead of the list of teams
	.tpl -> .template

	* core/templates/newtab.html: .teamtable -> .systemtable
	.tpl -> .template
	.preparing -> .initial

	* legacy/scripts/ui/newtab.js: .teamtable -> .systemtable
	.tpl -> .template

	* legacy/style/new.css: .teamtable -> .systemtable
	some additional table border styling rules added

	* legacy/scripts/ui/stateclassview.js: set css class to a valuemodel value

	* legacy/scripts/ui/tournamentview.js: tournamentview: for the system table (newtab)

	* legacy/scripts/ui/generictournamentview.js: a proxy class to automatically construct the right tournamentview subclass

2015-07-12	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/rankingordercontroller.js: can move between both lists with left/right arrows
	comments added

	* legacy/scripts/ui/rankingcomponentview.js: comments added

	* legacy/scripts/ui/rankingorderview.js: comments added

	* core/scripts/test/tournamentlistmodel.js: testing tournamentlistmodel
	testing save/restore functionality
	testing getglobalranking
	testing getglobalranking().globalrank correction

	* core/scripts/tournamentlistmodel.js: collect tournamentmodel instances in a single list
	functions for retrieval of tournament ids for every team from non-finished tournaments
	save()/restore() functions added
	getglobalranking(): rudimentary working version implemented
	globalrank is reduced by the number of skipped teams in another post-process step
	this ensures tightly-packed ranks and correct indices, although half-finished tournaments will need further adjustments
	insert/remove events are forwarded as update events
	tournament.ranking-'update' events are forwarded as update events, too
	accidentally used 'registerlistener' twice and forgot 'unregisterlistener'
	nan-bug fixed for tournamentless teams

	* core/scripts/listmodel.js: restore() can also take a factory function instead of a constructor

	* core/scripts/test/listmodel.js: testing restore() with factory function

	* core/scripts/test/tournamentindex.js: testing createtournament with savedata

	* core/scripts/tournamentindex.js: createtournament can be passed savedata, from which the system is then read
	this enables the direct use of listmodel.restore() for restoring a list of tournaments
	tournamentindex.systems is an array of all registered tournament systems

	* core/scripts/rankingmapper.js: mapping the ids, too
	mapping only the ids, not the displayorder

	* core/scripts/rankingmodel.js: added a field of ids to the output data for later teamid mapping
	length is set even for datalistener-less rankings (e.g. id-only), as long as there's a component

	* core/scripts/test/ranking*.js: ids field added to reference values
	only the ids field is mapped to external team ids, not the displayorder field

	* core/scripts/test/*tournamentmodel.js: ranking: ids field added to reference values

	* legacy/scripts/ui/rankingview.js: correctly using the ids field, not just the displayorder field, for teamid gathering

	* test/rankingview.html: forgot to update to the new matchresult constructor

	* core/scripts/matchresult.js: forgot a "this", which lead to thrown exceptions

	* core/scripts/test/rankingmodel.js: testing save-restore of id-only rankings
	testing the 'id' component

	* core/scripts/rankingidcomponent.js: values are correct, but the comparison is reversed as compared to typical points

	* core/scripts/rankingdatalistenerindex.js: autoformat: re-indented

	* legacy/scripts/ui/alltabs.js: tab_new removed

	* legacy/scripts/ui/backgroundscripts/redrawonplayerchange.js: tab_new removed

	* legacy/scripts/ui/backgroundscripts/tabnewcheaphacklistener.js: tab_new removed

	* legacy/scripts/ui/state.js: tab_new removed

	* legacy/scripts/ui/tab_games.js: tab_new removed

	* legacy/scripts/ui/test/tab.js: tab_new removed

	* core/scripts/orderlistmodel.js: orderlistmodel can convert a displayorder into a listmodel instance
	this is useful for views, which don't want to redraw everything
	enforceorder(): order of operation changed to reflect the order itself. this is a compromise, we still need to investigate further.

	* core/scripts/test/orderlistmodel.js: testing orderlistmodel

	* core/templates/newtab.html: classes adapted to match that of a team table

	* legacy/scripts/ui/statemodel.js: tournamentlistmodel added to the state

	* legacy/scripts/ui/teamview.js: teamview.bindteamlist creates a subclass, which takes indices of a model instead of teammodel instances
	this enables the use of orderlistmodels and similar constructs

	* legacy/scripts/ui/newtab.js: using systemlistview

	* legacy/scripts/ui/systemlistview.js: systemlistview: a single view for the subtournament system list
	using systemtablerowview instead of the more generic teamview to display single team rows

	* legacy/scripts/ui/options.js: circular dependency between tournamentmodel and statemodel fixed

	* legacy/scripts/ui/systemtablerowview.js: display a row inside the system table

2015-07-11	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/templates/rankingorderview.html: rankingorderview html code added

	* test/rankingorderview.html: rankingorderview test page added
	rankingorderview initialization uncommented
	using uniquelistmodels to enforce unique selections
	list of available components extended

	* legacy/style/rankingorderview.css: rankingorderview style added
	min-width for component lists set to 10em

	* tools/create-ui-class.sh: script to create a new ui class, which excludes test scripts for now

	* legacy/scripts/ui/rankingcomponentview.js: a view that displays information about a single ranking component selection element
	the $view is required to be an 'option' html element.

	* legacy/scripts/ui/rankingordercontroller.js: placeholder class added
	rankingordercontroller implemented to support appending/removing components and manually sorting them
	selecting the availablelist contents on moveright
	auto-highlighting left-moved component

	* legacy/scripts/ui/rankingorderview.js: currently fills both lists with information.
	the $somethinglist fields are used by the controller, so i made them into fields for direct access.
	hiding already selected components from the "available"-list
	more restrictive selection of the $template, using the .template-class

	* legacy/scripts/ui/strings.js: readable ranking names added
	ranking_matches -> ranking_numgames

2015-07-07	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/binarytreemodel.js: moved from binarytreenode.js

	* legacy/scripts/ui/binarytreenode.js: moved to binarytreemodel.js

	* legacy/scripts/ui/test/binarytreemodel.js: moved from binarytreenode.js

	* legacy/scripts/ui/test/binarytreenode.js: moved to binarytreemodel.js

2015-07-06	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/test/treenode.js: treenode tests added

	* legacy/scripts/ui/treenode.js: generic treenode implemented

	* legacy/scripts/ui/binarytreenode.js: binary tree nodes added
	binarytreenode is an indexedmodel subclass (rename imminent!)
	createchildren() removed
	special cases for root and subroot added

	* legacy/scripts/ui/test/binarytreenode.js: testing binarytreenode

2015-06-27	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/test/rankingtac.js: tac ranking: correct() test

2015-06-26	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/matchreferencelistmodel.js: using a referencemodel parameter to become a general referencelistmodel
	moved to referencelistmodel.js

	* core/scripts/test/matchreferencelistmodel.js: testing the referencemodel parameter

	* core/scripts/referencelistmodel.js: moved from matchreferencelistmodel.js

	* core/scripts/test/referencelistmodel.js: testing referencelistmodel, using matchreferencemodel for convenience

	* core/scripts/tournamentmodel.js: using referencelistmodel for getmatches, gethistory and getcorrections
	correct() takes resultreferencemodel
	getcorrections() added

	* core/scripts/correctionreferencemodel.js: a "referencemodel" for correctionmodel instances

	* core/scripts/test/correctionreferencemodel.js: testing correctionreferencemodel construction
	testing teams and scores
	testing id and group

	* core/scripts/test/tournamentmodel.js: testing tournament history

	* core/scripts/rankinglostpointslistener.js: accidentally applied the corrected result twice or more

	* core/scripts/rankingmodel.js: typo corrected (result -> correction)

	* core/scripts/rankingpointslistener.js: correction was applied inversely

	* core/scripts/rankingwinslistener.js: jdoc comments added

	* core/scripts/test/rankingmodel.js: rudimentary correct() test added. it works. yeah.

	* core/scripts/test/rankingheadtohead.js: todo comment added

	* core/scripts/test/rankingsonneborn.js: testing correct() function

2015-06-25	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/test/matchresult.js: testing matchresult instantiation from another matchresult

	* core/scripts/tournamentmodel.js: correct() function finished so far. only a list of corrections is missing.
	tournamentmodel.corrections added
	save/restore corrections
	push new corrections to correction list
	correction-related function profiles changed to use correctionmodel instances

	* core/scripts/correctionmodel.js: correctionmodel added

	* core/scripts/test/correctionmodel.js: testing the correctionmodel

	* core/scripts/resultreferencemodel.js: referencemodel for matchresults

	* core/scripts/test/resultreferencemodel.js: testing resultreferencemodel

2015-06-21	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/matchmodel.js: matchresult has to be loaded on demand to avoid circular dependencies between matchmodel and matchresult

	* core/scripts/matchresult.js: re-implemented as a matchmodel subclass
	this avoids code duplication between matchmodel and matchresult
	default constructor threw propertyerrors

	* core/scripts/tournamentmodel.js: onfinish(): reading matchmodel instance from the event emitter
	instead of using a secondary reference
	onfinish(): emitter != match. the match can be read from the collector source
	forgot to require the matchresult constructor

	* core/scripts/test/matchresult.js: matchresult tests adjusted

	* core/scripts/test/rankingdatalistenerindex.js: matchresult constructor calls updated

	* core/scripts/test/rankingheadtohead.js: matchresult constructor calls updated

	* core/scripts/test/rankingmapper.js: matchresult constructor calls updated

	* core/scripts/test/rankingmodel.js: matchresult constructor calls updated

	* core/scripts/test/rankingsonneborn.js: matchresult constructor calls updated

	* core/scripts/test/rankingtac.js: matchresult constructor calls updated

2015-06-18	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/test/tournamentmodel.js: testing getid and setid
	testing save/restore of the id

	* core/scripts/tournamentmodel.js: tournamentmodel implements the indexedmodel interface (hardcore)
	first steps toward a general correct() function

	* core/scripts/matchresult.js: default constructor ("empty constructor") added
	save/restore added
	equals() added for result comparison

	* core/scripts/test/matchresult.js: testing save/restore and the default constructor
	testing the equals() function

2015-06-13	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/matchview.js: matchview first draft added
	teamlist support extended and debugged
	binding a matchcontroller

	* legacy/scripts/ui/listview.js: initializing listview with existing values

	* test/matchview.html: matchview tests added
	matchcontroller tests added

	* legacy/scripts/ui/matchcontroller.js: matchcontroller added for finishing matches and validating points

2015-05-25	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/indexedlistmodel.js: clear() triggered a typeerror exception
	avoiding this exception by checking the input values

	* core/scripts/test/indexedlistmodel.js: testing list.clear() to avoid typeerror exceptions

	* test/*.html: header: boules -> tuvero

	* legacy/scripts/ui/rankingview.js: rankingview added

	* test/rankingview.html: rankingview test added

2015-05-24	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/vectormodel.js: using rle encoding/decoding for save()/restore()
	testing leading and trailing undefined values
	setting undefined to 0 for calculations and output

	* core/scripts/listmodel.js: compensating for undefined values

	* core/scripts/rle.js: forcing the insertion of undefined values

	* core/scripts/test/rle.js: testing undefined values

	* core/scripts/tournamentindex.js: tournamentindex object added
	tournamentmodel removed (unnecessary)
	roundtournamentmodel added

	* core/scripts/matrixmodel.js: restore() and saveformat bugs fixed

	* core/scripts/model.js: error output improved

	* core/scripts/roundtournamentmodel.js: roundtournamentmodel added for round tournaments
	it uses the slide system

	* core/scripts/test/roundtournamentmodel.js: testing roundtournamentmodel

	* core/scripts/test/tournamentindex.js: testing tournamentindex for defined systems

2015-05-23	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/rankingmodel.js: forgot to move variable allocation to extracted init() function

	* core/scripts/model.js: "this" output error fixed:
	forgot to set "this" properly, so it always showed "window"

	* core/scripts/matchmodel.js: allowing empty constructions
	'update' event was disabled by mistake. is only thrown on construction

	* core/scripts/test/matchmodel.js: tests use proper listeners
	missing variables added
	testing empty constructions

	* core/scripts/statevaluemodel.js: forcestate() added

	* core/scripts/test/statevaluemodel.js: forcestate() tested

	* core/scripts/test/tournamentmodel.js: save() added
	restore() added

	* core/scripts/tournamentmodel.js: save() tested
	restore() tested
	using listmodel.save/restore()
	comments added

	* core/scripts/listmodel.js: save()/restore() added
	saveformat added

	* core/scripts/test/listmodel.js: save()/restore() added

	* legacy/scripts/ui/listcollectormodel.js: comments added

	* core/scripts/rle.js: run length encoding/decoding of one- or multidimensional arrays

	* core/scripts/test/rle.js: testing run length encoding/decoding

2015-05-17	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/rankingtaclistener.js: accepting byes

	* core/scripts/test/rankingtac.js: testing bye()

	* core/scripts/rankingdatalistener.js: destroy() deletes ranking containers (e.g. ranking.points)

	* core/scripts/rankingmodel.js: reset() resets everything to a blank state
	component and listener creation extracted into init()
	restore() now works properly

	* core/scripts/rankinglostpointslistener.js: onbye() added

	* core/scripts/rankingnumgameslistener.js: onbye() added

	* core/scripts/rankingpointslistener.js: onbye() added

	* core/scripts/rankingwinslistener.js: onbye() added

	* core/scripts/rankingwinsmatrixlistener.js: comments updated

	* core/scripts/test/rankingmodel.js: testing bye(), resize() and reset()
	testing restore()

2015-05-10	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/rankingdatalistener.js: isprimary() added
	isprimary detects whether a datalistener is supposed to be serialized for storage
	onresize: verify that we're not dealing with a readonly object, e.g. a reference matrix

	* core/scripts/test/matrixmodel.js: debugging output removed

	* core/scripts/test/rankingheadtohead.js: isprimary test (is not even a data listener)

	* core/scripts/test/rankingmodel.js: isprimary tests
	rankingmodel() empty constructor tests adjusted
	testing empty constructors and extra dependencies

	* core/scripts/test/rankingtac.js: isprimary test

	* core/scripts/rankingmodel.js: empty calls to rankingmodel() are now allowed
	they allow for the deserialization into an empty rankingmodel instance
	get(): return empty ranking data for an empty rankingmodel instance

2015-05-09	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/test/type.js: testing new type.is() capabilities

	* core/scripts/type.js: type.is() accepts array, date, function etc. as second argument, not only strings

	* core/scripts/test/vectormodel.js: testing save() and restore()

	* core/scripts/vectormodel.js: save() and restore() added

	* core/scripts/valuemodel.js: comment against save()/restore() added

	* core/scripts/propertymodel.js: restricting the valid data types of values
	save() and restore() added

	* core/scripts/test/propertymodel.js: testing the new type restrictions
	save() and restore() tested

	* core/scripts/model.js: restore() type validation: multidimensional arrays enabled

	* core/scripts/matrixmodel.js: unoptimized save()/restore() added

	* core/scripts/test/matrixmodel.js: testing save()/restore()

	* core/scripts/rankingdatalistenerindex.js: comments added

	* core/scripts/rankingheadtoheadcomponent.js: debug logs removed

	* core/scripts/rankingmodel.js: function order changed
	remembering the datalisteners as an object
	saveformat added

2015-05-02	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/matchmodel.js: save() and restore() added

	* core/scripts/test/matchmodel.js: save() and restore() tested

	* legacy/scripts/ui/options.js: critical error fixed where new options are overwritten during updates

2015-05-01	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/model.js: save() and restore() added

	* core/scripts/test/model.js: testing save() and restore()

	* core/scripts/indexedmodel.js: save() and restore() added

	* core/scripts/test/indexedmodel.js: save() and restore() tested

2015-04-27	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/rankingmapper.js: mapping the results of rankingmodel.get() according to a list of team ids

	* core/scripts/test/rankingmapper.js: testing rankingmapper

	* core/scripts/tournamentmodel.js: getranking() added
	using rankingmapper for getranking()
	rankingmapper module loaded

	* core/scripts/test/tournamentmodel.js: getranking() tests added

2015-04-26	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/indexedlistmodel.js: using listupdatelistener instead of self-listening emitters

	* core/scripts/listmodel.js: using listupdatelistener instead of self-listening emitters

	* core/scripts/listupdatelistener.js: perform a function whenever a list element is inserted/removed

	* core/scripts/test/listupdatelistener.js: placeholder for when i'm awake again
	i'm awake again. tests have been added

	* core/scripts/listener.js: missing 'this' added to a foreach-call
	this fixes a critical memory leak
	listener.bind() added

	* core/scripts/test/listener.js: testing listener.destroy()
	testing listener.bind()

	* test/scripts/test.js: test modules are now in alphabetic order

	* tools/create-testjs.sh: sorting test modules by alphabetic order

	* core/scripts/matchreferencelistmodel.js: list, which re-maps team ids of a match
	redundant function parameter removed

	* core/scripts/test/matchreferencelistmodel.js: testing matchreferencelistmodel

	* core/scripts/tournamentmodel.js: using matchreferencelistmodel for getmatches()
	getstate() function added
	no matches and still 'running' -> transition to 'idle' state
	votes added
	votetypes -> votes
	getstate() returns a bound valuemodel instance
	abstract functions added
	initbyelistener added for convenience
	run() and finish() added as public api functions
	dummy functionality for initialmatches() and idlematches() to allow for testing
	missing modules and module order fixed
	'update' event re-added (required by propertymodel)
	state.get() and state.set() mess fixed
	this.teams.insert(teamid) corrected to this.teams.push(teamid)
	using correct matchresult fields
	initialmatches: confirming the number of teams
	idlematches: different teams than initialmatches

	* core/scripts/maplistmodel.js: map indices to list elements

	* core/scripts/test/maplistmodel.js: testing maplistmodel

	* tools/create-core-class.sh: creating test script, too

	* core/scripts/rankingdatalistener.js: onbye() function added

	* core/scripts/rankingmodel.js: bye() function added

	* boule/scripts/options.js: minpoints added

	* tac/scripts/options.js: minpoints added

	* test/scripts/options.js: minpoints added

	* core/scripts/test/tournamentmodel.js: tournamentmodel tests added

	* legacy/scripts/ui/listcollectormodel.js: comments added

2015-04-25	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/tournamentmodel.js: initializing rankingmodel on construction
	resizing rankingmodel during addteam()
	addteam(): respecting 'addteamrunning' and 'addteamidle' properties

	* core/scripts/listmodel.js: makereadonly() function added

	* core/scripts/test/listmodel.js: testing makereadonly()

2015-04-24	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/tournamentmodel.js: getgames jsdoc comment added
	tournament.votes + tournament.history added
	todo added
	using listcollectormodel to retrieve all results during match.finish() calls
	getgames -> getmatches
	validatematchresult added
	postprocessmatch added

	* core/scripts/matchmodel.js: gameresult -> matchresult
	this.finished removed. this is for the tournament to decide. it should have been a valuemodel instance anyway

	* core/scripts/matchresult.js: matchresult() accepts a matchmodel instance instead of a team list, too
	this.match is a reference to the match, if available

	* core/scripts/test/matchmodel.js: gamemodel -> matchmodel
	a game can be finished multiple times, if necessary
	reference value updated to contain the this.match reference

	* core/scripts/test/matchresult.js: matchresult tests added

	* legacy/scripts/ui/listcollectormodel.js: source field todo added

2015-04-19	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/teamsfileloadcontroller.js: debug logging removed

	* core/templates: templates added

	* boule/scripts/strings.js: variant-specific strings file
	version removed (dry principle)
	teamsicon added

	* tools/rebuild-from-template.sh: template resolving script added
	stripping whitespaces from end the of a line
	%version% is read from the version file
	renamed to index-from-template.sh

	* boule/index.html: rebuilt from template
	rebuilt from template, again
	'tabimgopts' removed - we're explicitly assigning now

	* legacy/scripts/ui/tab_games.js: reading min/max input values from options

	* legacy/scripts/ui/tab_history.js: reading min/max input values from options

	* core/templates/gamestab.html: dom: min/max attributes removed in favor of options

	* core/templates/historytab.html: dom: min/max attributes removed in favor of options
	deleted input field restored
	html formatting

	* makefile: `make boule/index.html` auto-builds from template
	`make tac/index.html` added
	`make update` also runs `make template`
	`make template`: `make boule/index.html` + `make tac/index.html
	`make clean-tools` removes .jslintrc/.jshintrc, too

	* tools/index-from-template.sh: renamed from rebuild-from-template.sh
	reading the target's templatedir before reading the core templatedir
	this allows the overriding of templates

	* core/templates/hometab.html: using %teamsicon%

	* core/templates/settingstab.html: using %teamsicon%

	* tac/scripts/strings.js: teamsicon added

	* core/templates/teamstab.html: 'tabimgopts' removed - we're explicitly assigning now
	importing {{teamsizeview}}

	* core/templates/abouttab.html: importing {{extralinks}}

	* core/templates/extralinks.html: empty. supposed to contain extra links for the about tab

	* core/templates/newtab.html: importing {{newtabtodo}}
	html formatting

	* core/templates/newtabtodo.html: list of todo items, which are displayed in tab_new

	* core/templates/teamsizeview.html: separate teamsizeview.
	can be overridden to disable teamsizeview. not ideal, but it works. must use options instead

	* tac/templates/: tac-specific templates

	* tac/index.html: auto-built from templates

	* tac/templates/teamsizeview.html: small note added to signify change in default behaviour

	* tools/build.sh: removing template folder and strings file

2015-04-15	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/teamsfileloadcontroller.js: handling both utf-8 and latin-1 as possible encodings

2015-04-11	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boule/index.html: noscript messages added to splash screen

	* tac/index.html: noscript messages added to splash screen
	forgotten </noscript>-tag added

	* legacy/scripts/backend/buchholzranking.js: reading bye points from options

	* legacy/scripts/backend/finebuchholzranking.js: reading bye points from options

	* legacy/scripts/backend/nettoranking.js: reading bye points from options

	* legacy/scripts/ui/tab_debug.js: reading max points from options

	* legacy/scripts/ui/tab_history.js: reading bye points from options
	reading kotree box height from the game positions, not from dubious calculations

	* boule/scripts/options.js: logic moved to ui/options

	* legacy/scripts/ui/options.js: central options object. (don't repeat yourself!)
	don't require 'ui/options', load 'options' instead.
	this options object does not remove unused keys when reading from blob to allow for the insertion of new keys

	* tac/scripts/options.js: logic moved to ui/options
	bye is counted as 8:6

	* test/scripts/options.js: logic moved to ui/options

2015-03-29	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/backend/kotournament.js: critical matchset cadrage error fixed
	initial (pre-shuffle) order was matchorder, not linear, leaving single holes in the ranking

	* legacy/scripts/ui/tab_history.js: kotree boxheight bug fixed:
	when the last game was a bye, the box wasn't high enough

	* core/style/table.css: printing spaces every 4 entries (instead of alternating grey background)
	print: colors removed (= white)
	print: not using white anymore, but "transparent"

	* boule/index.html: unnecessary line break removed in #ranking
	start page rearranged
	"why chrome?"-text updated
	"delete tournament" button renamed

	* core/style/boxview.css: print: header margins removed

	* legacy/style/general.css: print: page paddings removed
	print: hiding editable-indicator during hover

	* legacy/scripts/ui/backgroundscripts/online.js: "offline!"-confirmation removed when using local files while offline

	* tac/index.html: start page rearranged
	"why chrome?"-text updated
	"delete tournament" button renamed

	* legacy/style/teams.css: hiding hover-cursor during printing

2015-03-25	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/tab_history.js: correction logic: gamestable check was inverted by accident
	additional error output when unable to find the to be corrected game
	correction for games table re-enabled
	storing the tournamentid of kotree tournaments
	determining the tournament system from the dom. this is bad, but until the mvc rewrite, it works
	this bad code enables corrections from the ko tree

	* boule/index.html: kotree correction class (.correct) added
	kotree: showing hover indicator .editable

	* tac/index.html: tac brought up-to-date with boule

	* core/style/tabmenuview.css: margins moved to #app

	* core/style/tabview.css: margins moved to #app

	* legacy/style/general.css: #app defines the previous margins as padding

	* legacy/style/splash.css: less resource-intensive splash transitions
	splash screen slides to the left, tabs fade in from behind

	* legacy/scripts/backend/kotournament.js: restoring savestate compatibility for kotournament
	this fixes the critical issue #99

2015-03-22	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/players.js: accepting an empty blob as valid input

	* legacy/scripts/ui/storage.js: calling fromblob() with an empty blob to force e.g. visibility updates

	* legacy/scripts/ui/statemodel.js: state.numtournaments added as a temporary measure

	* legacy/scripts/ui/tab_new.js: updating state.numtournaments from tournaments.numtournaments
	explanation: this enables us to hide player registration fields after the first tournament started

	* legacy/scripts/ui/teamstab.js: classview for the 'noreg' class, which hides player registration and removal fields

	* legacy/style/teams.css: .noreg logic

	* core/scripts/rankingtaclistener.js: using our own sign() function
	math.sign() is an experimental feature of ecmascript 6. tuvero is based on ecmascript 5.

	* legacy/scripts/backend/kotournament.js: roundids added to show which "loser round" a player belongs to
	round = bestplace/2, as played in separate ko trees (currently not rendered)
	a lot of annoying debugging output added
	games for loser rounds are added
	copying the roundid into every new game(). this is a hack.
	some of the annoying debugging output removed
	getranking() shows the best possible places for each player (github issue #3)
	second places are handled properly

	* legacy/scripts/ui/tab_history.js: only showing the winner round (roundid == 0)
	kotree: only showing round-0-games from history (fixes width issues)
	showing the game for third place (currently without label) in all possible states
	showing gamebox label for games for first and third places

	* legacy/scripts/ui/tab_games.js: history: applying game-specific roundid, if available

	* boule/index.html: kotree gamebox label added

	* legacy/scripts/ui/strings.js: firstplace and thirdplace added

	* legacy/style/history.css: showing kotree box labels above the box

	* tac/index.html: kotree gamebox label added

	* legacy/scripts/ui/backgroundscripts/reset.js: "reset"-button references the correct tab again

	* core/scripts/tournamentmodel.js: first version of tournamentmodel committed

2015-03-17	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boule/index.html: tournament mode preview shortened

	* tac/index.html: tournament mode preview shortened
	forgotten accesskey for debug-tab added

	* index.html: tuvero archive link added

2015-03-15	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/listmodel.js: erase() added
	return value for insert() added (undefined on failure)
	return value comments updated to allow undefined on failure
	insert() returns the inserted object

	* core/scripts/test/listmodel.js: testing erase()

	* core/scripts/test/uniquelistmodel.js: testing uniquelistmodel

	* core/scripts/uniquelistmodel.js: uniquelistmodel, in which every object can only be contained once

	* core/scripts/emitter.js: mixin pattern construction enabled

	* core/scripts/listener.js: mixin pattern construction enabled

	* core/scripts/test/emitter.js: testing mixin pattern construction validity

	* core/scripts/test/test.js: testing type, type.is and type.istype

	* core/scripts/type.js: moved from legacy

	* legacy/scripts/ui/type.js: moved to core

	* core/scripts/selectionvaluemodel.js: set() returns success

	* core/scripts/test/selectionvaluemodel.js: set() return value tests

	* core/scripts/statevaluemodel.js: model for states and state transitions

	* core/scripts/test/statevaluemodel.js: model for states and state transitions

	* core/scripts/readonlylistmodel.js: bind to an existing list and provide the read-only api functions and events

	* core/scripts/test/readonlylistmodel.js: testing readonlylistmodel

2015-03-14	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/style/fontsize.css: using the pre-defined font size as the base font size

	* index.html: "offline"-hint added

	* core/scripts/*matrix.js: missing comments and jsdoc tags added
	return paths adjusted

	* core/scripts/matrixmodel.js: faster resize function
	remote: noemit-argument removed. was required by resize()

	* core/scripts/gamemodel.js: representation of a game added, both internal and external
	finish() and emit("finish") added
	cannot finish a game twice

	* core/scripts/test/gamemodel.js: gamemodel tests added
	testing finish(0 and the "finish" event
	testing whether a game really cannot be finished twice

	* core/scripts/gamereferencemodel.js: game reference with team id mapping
	forwarding finish() and onfinish()
	unregistering during onfinish(). the current api disallows any event after 'finish'

	* core/scripts/test/gamereferencemodel.js: testing gamereferencemodel
	testing finish() and the 'finish' events

	* core/scripts/gameresult.js: players -> teams
	points -> score

	* core/scripts/ranking*.js: gameresult variables updated

	* core/scripts/rankingmodel.js: long-closed todos removed

	* core/scripts/emitter.js: emit+unregisterlistener bug fixed:
	calling unregisterlistener from an event callback caused listeners to be skipped

	* core/scripts/test/emitter.js: test case for emit+unregisterlistener bug

	* core/scripts/propertymodel.js: propertymodel added: store/retrieve values from keys
	emits update events when a value is changed or set

	* core/scripts/test/propertymodel.js: propertymodel unit test

2015-03-09	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/tabshandle.js: compatible with unittest.html
	dummy functions reduced to throw more errors where appropriate

	* core/scripts/test/valuemodel.js: testing bind()

	* core/scripts/valuemodel.js: bind(): construction-time validation of bind-compatible valuemodel

	* core/scripts/view.js: throwing an error if $view is not defined/unavailable
	also printing the selector when throwing the error
	and not throwing anymore, but printing soft errors
	variable typo fixed

	* legacy/scripts/ui/teamstab.js: only load on full pages, not in the tests
	teamsize icon is option-controlled (see options.js)

	* legacy/scripts/ui/tab_history.js: fixed a bug where a swiss starting with not-first player breaks the tab by iterating over the correct array

	* legacy/scripts/ui/tab_new.js: every swiss bye vote was part of the first tournament!!!

	* index.html: periodically check for updates of the main page
	not checking for updates if the browser is offline
	checking every 5 minutes

	* boule/scripts/options.js: teamsizeicon option enabled

	* tac/scripts/options.js: teamsizeicon option disabled

	* legacy/scripts/ui/tab_debug.js: devtools back online:
	finishround() finally finished more than one game
	playtournament() abort if there's not enough players
	general cleanup of the file (autoformatter and stuff)

	* doc/doc_de/*.md: basic code documentation added

2015-03-08	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* version: starting work on 1.4.6

	* news: starting work on 1.4.6

	* tools/create-core-class.sh: unbounded variable bug ($2 with <2 arguments) fixed
	reading constructor arguments from superconstructor

	* core/scripts/selectionvaluemodel.js: valuemodel, which is restricted to a list of allowed values

	* core/scripts/test/selectionvaluemodel.js: testing selectionvaluemodel

	* core/scripts/valuemodel.js: constructor: calling its own set() function
	bind() added to mirror another valuemodel instances value
	bind(): reference fixed (forgot a prototype reference)

	* core/scripts/tabmenucontroller.js: empty tabmenucontroller added
	following location.hash, nothing more. no button magic or anything
	follow location.hash on startup
	follow location.hash when it becomes accessible
	focus() added. it just performs an automated hashchange

	* core/scripts/tabmenuview.js: initialization logic of the new tab system written
	update/validation logic written: only open valid tabs
	using selectionvaluemodel for a list of available (visible) tabs
	selectionvaluemodel pre-filters whether a tab should be visible
	$tabs and $tabicons are objects for keyed access, as opposed to indexed access
	class construction implicitly and deliberately calls onupdate() to show the first tab
	forgot to remove the 'open' class from previously open menu icons
	tabmenuview does not work with ids anymore, but uses data-id instead to avoid auto-scrolling
	accesskey support added
	not using a timeout for the update, because it was a dumb idea
	hiding specially marked tabs (.hiddentab)
	instantiating a tabmodel for each tab, which can be retrieved using gettabmodel()
	using tabmodel to listen for tab availability changes and image parameters
	using tabimageview to set the data-img attribute
	focus() added. it delegates to the controller.

	* core/style/mainstyle.css: tab.css removed; tab*view.css added

	* core/style/tabmenuview.css: style of the tab menu, without tabs

	* core/style/tabview.css: style of the tabs themselves

	* legacy/scripts/ui/tabshandle.js: disabled
	rewritten to be a wrapper for the tabmenuview
	aborting when this is a test page ($(#testmain).length !== 0)

	* legacy/style/tabs.css: removed, replaced by tabmenuview.css and tabview.css

	* test/tabmenuview.html: tab test page
	using data-id instead of id to avoid auto-scrolling
	some accesskeys added
	cycling through the teams imgparam
	alternating the html5_logo_128 visibility/accessibility
	disabling the debug tab visibility
	disabling the deleteteam tab accessibility
	descriptive text added
	focus() test added (goto form on the #home page)
	scripts tags moved inside the body (for ie)

	* makefile: `make update` also updates the test index

	* core/scripts/classview.js: moved from legacy to core

	* core/scripts/listexclusionlistener.js: todo: rename
	when the trigger (a valuemodel) is true, the value added to the list
	when the trigger is false, the value is removed from the list

	* core/scripts/tabimageview.js: listen for imgparam changes and set the tab icon image

	* core/scripts/tabmodel.js: a struct which defines the tab state

	* legacy/scripts/ui/classview.js: classview moved to core

	* legacy/scripts/ui/teamremovecontroller.js: classview moved to core

	* legacy/scripts/ui/teamstab.js: classview moved to core

	* boule/index.html: new tabmenu structure adapted (id -> data-tab)

	* core/scripts/main.js: tabshandle.valid() disabled (unnecessary)

	* legacy/scripts/ui/autocomplete.js: $('id') -> data-tab

	* legacy/scripts/ui/backgroundscripts/load.js: $('id') -> data-tab

	* legacy/scripts/ui/state.js: tabshandle.updateopts() disabled
	$('id') -> data-tab

	* legacy/scripts/ui/tab_debug.js: $('id') -> data-tab

	* legacy/scripts/ui/tab_games.js: $('id') -> data-tab

	* legacy/scripts/ui/tab_history.js: $('id') -> data-tab
	"visualupdate" kotree rendering became unnecessary a long time ago

	* legacy/scripts/ui/tab_new.js: $('id') -> data-tab

	* legacy/scripts/ui/taboptslistener.js: removed in favor of tabmodel

	* legacy/scripts/ui/tab_ranking.js: $('id') -> data-tab

	* legacy/scripts/ui/tab_settings.js: $('id') -> data-tab

	* legacy/scripts/ui/tabs.js: removed in favor of tabmenuview

	* legacy/style/about.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/debug.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/games.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/general.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/history.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/home.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/lanes.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/new.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/ranking.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/settings.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/splash.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/teams.css: new tabmenu structure adapted (id -> data-tab)

	* legacy/style/toasts.css: new tabmenu structure adapted (id -> data-tab)

	* tac/index.html: new tabmenu structure adapted (id -> data-tab)

2015-03-04	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/style/new.css: only styling the system buttons, not the floating buttons

	* build-tools/: moved to tools/
	build-tools/ references changed to tools/

	* makefile: build-tools/ references changed to tools/
	`make all` removed (misleading)
	`make build` copies the index file (welcome page)
	`make clean` removed the new build/ directory
	`make manifest` removed in favor of `make all`, in which it is used
	./tools/makefile functions invoked directly
	creating build directory where necessary
	`make clean-shared-code` removed
	`make clean-build-tools` -> `make clean-tools`
	`make news` moved into prepare-release.sh

	* build-scripts/write-reference.sh: moved to tools/archive/

	* boule/scripts/build.js: build directory changed to build/boule/

	* .gitignore: build directory changed to build/

	* tac/scripts/build.js: build directory changed to build/tac/

	* test/scripts/build.js: build directory changed to build/test/

	* tools/build.sh: build directory changed to build/
	using the first argument as the source directory
	is supposed to be run inside the root directory
	"rmdir: missing operand" warning: non-issue notification and "done" message added

	* tools/write-manifest.sh: first argument is the target directory

	* tools/makefile: removed

	* tools/write-sprite.sh: first argument is the target directory

	* tools/codestyle.sh: build path adjusted (for ignoring already-built scripts)

	* tools/prepare-release.sh: build dirs and make targets updated
	changing the news date after everything is finished
	changing the news date after the build finished, but before the source files are removed

	* boule/index.html: manual links disabled until we actually have a manual

	* news: updated from commit messages
	updated from github issues

	* tac/index.html: manual links disabled until we actually have a manual

	* doc/: removed for now. please rewrite the documentation whenever possible

2015-03-02	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: favicon bug fixed, it actually displays now
	"dev-release" message replaced with links

	* boule/index.html: contributors updated
	license points to github
	compatible browsers updated
	"all functions supported" message removed - it was wrong in unsupported browsers
	donation text updated (webserver, domain, ...)
	progresstable checkbox replaced with gamestable checkbox
	kotree: borderless
	splash icon added
	tuvero.de link text changed

	* tac/index.html: contributors updated
	license points to github
	compatible browsers updated
	"all functions supported" message removed - it was wrong in unsupported browsers
	donation text updated (webserver, domain, ...)
	progresstable checkbox replaced with gamestable checkbox
	kotree: borderless
	splash icon added
	tuvero.de link text changed

	* legacy/scripts/ui/tab_history.js: gamestable button logic adjusted
	unnecessary functions and variables removed (currentround)
	kotree: width respects hidden player names
	kotree pseudo-margin-top reduced

	* core/style/table.css: borderless class added to table

	* legacy/style/history.css: kotree game results vertically aligned
	kotree box height adjusted

	* legacy/style/general.css: hiding the tab header during printing
	have you seen how much space it takes?

	* legacy/style/splash.css: splash icon added with fixed height

	* makefile: `make update` updates all intermediate files

	* legacy/scripts/ui/tab_settings.js: csv export: ignoring empty strings

	* legacy/scripts/ui/team.js: tocsv(): not exporting if there's no team

	* legacy/style/buttons.css: fontsize-independent button styles

	* legacy/style/settings.css: redundant button styles removed

	* core/scripts/rankingtaclistener.js: special case handling:
	loser has 0 points -> give him 1 point
	winner has less than 8 points? -> don't give him 12 points
	points are equal? -> handled by "winner has less than 8 points"

	* core/scripts/test/rankingtac.js: testing tac ranking adjustments

	* readme_en.md: short readme added
	oops, forgot something

	* readme.md: kurzanleitung hinzugefügt

	* build-tools/merge-master.sh: exec flag set

	* build-tools/prepare-release.sh: exec flag set
	force-add the build directories after build
	reading release version from branch name
	branch name validation logic was reversed
	`make clean-shared-code` was redundant

2015-03-01	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* legacy/scripts/ui/debug.js: isdevversion: not waiting for document load
	isdevversion regex corrected: the title does contain more than just a version number

	* legacy/scripts/ui/update.js: only complaining about a missing manifest if the document is local
	calling swapcache()

	* core/style/general.css: table style moved to tableview.css

	* core/style/table.css: central table style file
	additional table classes added
	header font style improved: bigger and more dominant
	borders added (content rows only)
	hiding borders when printing

	* build-tools/write-mainstyle.sh: auto-create the main shared style file core/style/mainstyle.css

	* makefile: `make style` added to auto-create style files
	`make manifest` added for top-level index.html manifest creation

	* core/style/: most files moved to legacy/style/

	* legacy/style/new.css: special css rules required for the systems table

	* boule/index.html: additional table classes added
	links updated (boules -> tuvero)
	#home: load/save/reset box added
	#settings: load/save box removed
	#settings: hidden 1px*1px filereader for file loading (cheap hack)
	#home tab cleaned up
	#settings tab cleaned up
	boules -> tuvero
	reload button removed

	* legacy/scripts/ui/teamview.js: removing player names instead of hiding
	improves player table borders significantly

	* legacy/style/history.css: general table properties moved to table.css

	* legacy/style/ranking.css: general table properties moved to table.css

	* legacy/style/teams.css: general table properties moved to table.css

	* legacy/style/games.css: thinner borders for game boxes
	thinner borders for vote boxes

	* core/style/newteamview.css: force hiding the newtab elements when printing

	* legacy/style/tabs.css: inter-tabmenu margins, paddings and borders are now fontsize-independent
	page margins fixed to px values, not fontsize-dependent units

	* core/style/fontsize.css: smoother fontsize changes through css transition

	* tac/index.html: manual merge of the boule/index.html changes. we need a templating system...
	http://spiel-tac.de: tac homepage added to the links
	#home: load/save/reset box added
	#settings: load/save box removed
	#settings: hidden 1px*1px filereader for file loading (cheap hack)
	#home tab cleaned up
	#settings tab cleaned up
	boules -> tuvero
	reload button removed

	* core/images/clear.png: red crossmark icon instead of blank (see blank.png for that)

	* core/images/load.png: moved from upload.png and downscaled to 96px*96px

	* core/images/svg/clear.svg: red crossmark icon instead of blank (see blank.png for that)

	* core/images/svg/load.svg: moved from upload.svg and downscaled to 96px*96px

	* core/images/svg/upload.svg: moved to load.svg

	* core/images/upload.png: moved to load.png

	* legacy/style/settings.css: 1px*1px file loader input (cheaphack)
	hiding any file inputs
	hidden input elements are absolute-positioned, not right-floating, to avoid scrollbar bug

	* build-tools/write-sprite.sh: aborting if a file does not exist

	* test/sprite.html: upload.png -> load.png

	* legacy/style/buttons.css: styling all data-img buttons
	button style specificity reduced

	* legacy/scripts/ui/backgroundscripts/load.js: delegating load-button clicks to the hidden file input
	.load input.file selector corrected

	* legacy/scripts/ui/backgroundscripts/reset.js: delegating reset button click

	* legacy/style/teamsizeview.css: redundant style rules simplified

	* legacy/scripts/ui/backgroundscripts/online.js: distinguishing between remote and local installations

	* legacy/scripts/ui/tab_settings.js: autocomplete reload button removed
	autocomplete load button delegates clicks to the hidden file input
	jquery selectors corrected
	boules.csv -> options.csvfile

	* build-tools/write-manifest.sh: using more restrictive paths
	not failing when there's no script, stylesheet or image to load

	* boule/scripts/options.js: savefile and csvfile fields added

	* legacy/scripts/ui/backgroundscripts/save.js: boules.json -> options.savefile

	* legacy/style/home.css: prettier vertical-align

	* tac/scripts/options.js: savefile and csvfile fields added

	* index.html: swapping and auto-reloading on cache update

2015-02-28	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: #home added to the links to avoid history-mangling

	* legacy/scripts/ui/backgroundscripts/saveonplayernamechange.js: functionality moved to savestate.js

	* legacy/scripts/ui/savestate.js: saving on player name change
	onupdate added

	* boule/index.html: numbering typo fixed
	onlinecheck button added

	* tac/index.html: numbering typo fixed
	onlinecheck button added

	* legacy/scripts/ui/tab_debug.js: variable scopes corrected
	player auto-registration re-enabled

	* legacy/scripts/ui/teammodel.js: onupdate: forwarding the id of the updated player

	* legacy/scripts/ui/teamtoastslistener.js: emit toast when adding, removing or renaming a team

	* boule/scripts/main.js: only load core/main

	* core/scripts/main.js: shared main script
	contains contents of the {target}/scripts/main.js scripts
	loads core/config and core/common

	* tac/scripts/main.js: only load core/core

	* main/style/teams.css: @print: hiding buttons with !important keyword

	* legacy/scripts/ui/tab_games.js: cheap hack: focussing #new and showing toast when last game has been removed
	uses an explicit full redraw, which is bad

	* legacy/scripts/ui/tournaments.js: debugging output removed

	* core/style/onlinecheck.css: onlinecheck button styled

	* core/style/settings.css: devel button style added

	* legacy/scripts/ui/backgroundscripts/online.js: managing onlinecheck button
	directly requiring jquery
	displaying cache-status in onlinecheck button

	* legacy/scripts/ui/update.js: checking the current status before the first event fired
	this should also display missed events

	* build-tools/create-commonjs.sh: excluding core/main from common.js to avoid circular dependencies

	* test/unittest.html: offline capability restored

	* build-tools/makefile: a build does not write and optimize the sprites anymore
	sprites are supposed to be tested pre-commit (and, thus, pre-build)

	* build-tools/write-sprite.sh: optimizing the newly written sprite
	pixel-comparing the old and the new sprite, replacing only when there's a change
	final output improved

	* makefile: a build does not write and optimize the sprites anymore
	`make sprites` added

2015-02-27	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/rankingtaclistener.js: tac ranking corrected: winner only gets saldo

	* core/scripts/test/rankingtac.js: testing corrected tac ranking

	* legacy/scripts/ui/backgroundscripts/redrawonplayerchange.js: update tabs on player name change

	* tac/images/teams.png: replacement of the teams2 icon, which can no longer be displayed

	* tac/index.html: using the teams icon instead of teams2 due to differences in entry size vs. number of players

	* legacy/scripts/ui/statemodel.js: using three players per team as the default again

	* legacy/scripts/ui/teamstab.js: limiting the number of players per team to the options.js-provided values (cheaphack)

	* tac/scripts/options.js: changing the number of names per team to 1 instead of 2

	* legacy/scripts/ui/players.js: player autocompletion: author name removed

2015-02-23	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* build-tools/write-sprite.sh: listfiles() multi-html formatting bug fixed

	* makefile: explicit `make test/index.html` added for auto-update
	`make all` includes `make test`

	* test/*.html: testenv pattern changed to a testmain function pattern, which also works after the optimization
	stylesheet changed to main.css

	* test/scripts/build.js: build options added

	* test/scripts/testenv.js: moved to testmain.js

	* test/scripts/testmain.js: moved from testmain.js
	after config and module loading, testfunc is called directly

	* test/style/main.css: single main stylesheet for all tests (unit and view)

	* test/style/testenv.css: removed

	* test/unittest.html: stylesheet changed to style.css

	* boule/index.html: options: development tools section cleaned up

	* tac/index.html: options: development tools section cleaned up

	* core/scripts/matrixmodel.js: emitting 'resize'
	internal remove() argument
	not calling resize() from the constructor to enable readonly-matrices
	getabs() removed in favor of delegated matrices

	* core/scripts/test/matrixmodel.js: getabs() tests removed

	* core/scripts/delegatematrix.js: delegatematrix, which is a read-only reference to an actual matrix
	get() can modify the returned value and uses the superget() function, which links to matrix.get()

	* core/scripts/test/delegatematrix.js: test construction, disabled write functions and get()

	* core/scripts/absolutematrix.js: a delegatematrix subclass which always returns the absolute value

	* core/scripts/positivematrix.js: a delegatematrix subclass which only returns positive values

	* core/scripts/test/absolutematrix.js: test absolutematrix.get()

	* core/scripts/test/positivematrix.js: test positivematrix.get()

	* core/scripts/test/transposesummatrix.js: transposesummatrix.get() test

	* core/scripts/transposesummatrix.js: sum of a matrix and its transpose

	* core/scripts/rankingdatalistenerindex.js: rankingwinsmatrixlistener added
	sonneborn added
	tac added
	headtoheadmatrix added

	* core/scripts/rankingdatalistener.js: resize new fields only if the sizes differ

	* core/scripts/rankinggamematrixlistener.js: gamematrix equals transposesummatrix(rankingwinsmatrixlistener)

	* core/scripts/rankingwinsmatrixlistener.js: rankingwinsmatrixlistener: win score for every opponent.
	side note: the line sum vector of this matrix is the number of wins (and draws/2, if there's a draw)

	* core/scripts/rankingcomponentindex.js: sonneborn added
	tac added
	headtohead added

	* core/scripts/rankingsonneborncomponent.js: sort by sonneborn-berger score

	* core/scripts/rankingsonnebornlistener.js: calculate sonneborn-berger score from wins and winmatrix

	* core/scripts/test/rankingsonneborn.js: testing the sonneborn score calculations

	* core/scripts/rankingmodel.js: didn't skip duplicate ranks

	* core/scripts/test/rankingmodel.js: duplicate ranks test added

	* core/scripts/test/vectormodel.js: testing mult(number)

	* core/scripts/vectormodel.js: mult() overloaded: mult(vector) and mult(number)
	mult(number) and mult(number, vector) do what you'd expect

	* core/scripts/rankingtaccomponent.js: tac ranking component added

	* core/scripts/rankingtaclistener.js: tac calculations added (12*wins + points)

	* core/scripts/test/rankingtac.js: testing tac ranking calculations

	* core/scripts/test/transposedifferencematrix.js: like transposesummatrix, but with a difference

	* core/scripts/transposedifferencematrix.js: like transposesummatrix, but with a difference

	* core/scripts/rankingcomponent.js: getvalues(): typo in the 'undefined'-removal function fixed

	* core/scripts/rankingheadtoheadcomponent.js: headtohead comparison added

	* core/scripts/rankingheadtoheadmatrixlistener.js: headtoheadmatrix added for comparison

	* core/scripts/test/rankingheadtohead.js: simpe headtohead test
	test of cyclic headtohead sorting

2015-02-22	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/test/vectormodel.js: fill() tested
	testing mult(a,b) and mult(a)
	testing add(a,b) and add(a)

	* core/scripts/vectormodel.js: fill() added: fill whole vector with one value
	setproduct(a,b) -> mult(a,b); where b now defaults to this
	add(a,b) added; where b defaults to this

	* core/scripts/matrixmodel.js: fill() tested

	* core/scripts/test/matrixmodel.js: fill() added: fill whole array with one value
	in the antisymmetricmatrixmodel, the superdiagonal elements are inverted

	* core/scripts/rankingdatalistener.js: base class for ranking data fields
	ranking.size -> ranking.length
	events: insert -> result

	* core/scripts/rankingmodel.js: rankingdatalisteners will be event-based
	additional dependencies on construction (e.g. for 'have they played before'-type questions)
	storing the dependencies of the componentchain for building datalisteners
	using rankingdatalistenerindex for registering all required datalisteners
	constructor argument validation
	processing the additional dependencies
	size -> length
	keeping componentnames
	events: insert -> result
	reset(), result(), invalidate(), get() and resize() functions added
	correct() function stub added
	accidentally fired an 'insert' event. should have been a 'result' event
	private helper functions added: getrankingorder() and getranks()
	updateranking(): private function to extract the ranks, displayorder and separate components

	* core/scripts/rankingpointslistener.js: updates ranking.points
	cyclic inheritance fixed
	events: insert -> result
	result.player -> result.players

	* core/scripts/rankingwinslistener.js: updates ranking.wins
	cyclic inheritance fixed
	events: insert -> result
	result.player -> result.players
	index vs. player confusion fixed

	* core/scripts/gamesrankingcomponent.js: using vectormodel.get()

	* core/scripts/pointsrankingcomponent.js: using vectormodel.get()

	* core/scripts/saldorankingcomponent.js: using vectormodel.get()

	* core/scripts/winsrankingcomponent.js: using vectormodel.get()

	* core/scripts/rankinglostpointslistener.js: subtracting the opponent's points to lostpoints
	typo fixed: it accidentally added the points, instead of subtracting
	cyclic inheritance fixed
	events: insert -> result
	result.player -> result.players
	forgot a 'this'

	* core/scripts/rankingsaldolistener.js: adding points and lostpoints (the last of which is negative)
	cyclic inheritance fixed

	* core/scripts/rankinggamescomponent.js: fixed a wrong name (copy&paste error)
	moved to rankingnumgamescomponent.js

	* core/scripts/rankingidcomponent.js: added an empty dependencies array to avoid the implicit 'id' dependency
	dependencied -> dependencies typo fixed. we need a test for this.

	* core/scripts/rankingwinscomponent.js: fixed a wrong name (copy&paste error)

	* core/scripts/rankingcomponent.js: using the dependencies array to form a dependency chain
	value default: undefined (to filter out unnecessary values in the final ranking object)
	getvalues(): function to recursively extract all values along the component chain into a 2d array

	* core/scripts/rankingdatalistenerindex.js: datalistener index, similar to rankingcomponentindex
	helper functions for flattening, ordering and compressing the dependencies
	when a datalistener is undefined, return its name in the names array
	registerdatalisteners(): swapping argument order
	no names -> abort
	rankingnumgameslistener added to index
	"undefined"-error message improved by printing the missing name directly
	gamematrix, buchholz and finebuchholz added

	* core/scripts/rankingcomponentindex.js: reversing the components to the correct order
	buchholz and finebuchholz added

	* core/scripts/rankinglostpointscomponent.js: 'lostpoints' component added (negative numbers)

	* core/scripts/rankingnumgamescomponent.js: moved from rankinggamescomponent.js

	* core/scripts/test/rankingcomponentindex.js: rankingcomponentindex tests: chaining and  invalid names

	* core/scripts/rankingnumgameslistener.js: rankingnumgameslistener added
	events: insert -> result
	result.player -> result.players

	* core/scripts/test/rankingdatalistenerindex.js: test for rankingdatalistenerindex added
	registerdatalisteners(): swapping argument order
	ranking.size -> ranking.length
	events: insert -> result
	using gameresult class

	* build-tools/create-commonjs.sh: throwing an error if the module is undefined

	* build-tools/create-testjs.sh: parsing and displaying load errors in the console and qunit

	* core/scripts/test/rankingmodel.js: rankingmodel tests added: construction exceptions
	testing the fired 'update' events
	testing get(), invalidate() and result()
	testing finebuchholz ranking

	* core/scripts/gameresult.js: simple gameresult class added

	* core/scripts/rankingbuchholzcomponent.js: rankingbuchholzcomponent added

	* core/scripts/rankingbuchholzlistener.js: rankingbuchholzlistener added

	* core/scripts/rankingfinebuchholzcomponent.js: rankingfinebuchholzcomponent added

	* core/scripts/rankingfinebuchholzlistener.js: rankingfinebuchholzlistener added

	* core/scripts/rankinggamematrixlistener.js: rankinggamematrixlistener added

	* legacy/scripts/ui/test/listcollectormodel.js: unnecessary logging output removed

	* build-tools/write-sprite.sh: reading required images from the html file, not the filesystem
	reading shared images from core/images

	* boule/images/: shared images moved to core/images
	favicon.png and games.png retained, as well as svg/games.svg

	* build-tools/build.sh: rmdir command is allowed to fail when there's nothing to remove

	* build-tools/makefile: smallchange.png doesn't need optimization

	* core/images/: central image folder

	* makefile: `make clean` is more verbose

	* tac/images/: only favicon.png, games.png, svg/games.svg and svg/games_black.svg retained

	* test/checkboxview.html: module paths updated

	* test/teamentry.html: module paths updated

	* test/teamlistview.html: module paths updated

	* test/teamsizeview.html: module paths updated

	* build-tools/write-testindex.sh: automatically writing test/index.html

	* test/index.html: a page which links to the unit test page and the individual view tests

2015-02-21	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/listmodel.js: listmodel moved to core

	* core/scripts/test/listmodel.js: listmodel moved to core
	todo comment removed

	* legacy/scripts/ui/indexedlistmodel.js: listmodel references updated
	indexedlistmodel moved to core

	* legacy/scripts/ui/listmodel.js: listmodel moved to core

	* legacy/scripts/ui/statemodel.js: listmodel references updated
	valuemodel references updated
	indexedmodel/indexedlistmodel references updated

	* legacy/scripts/ui/test/indexedlistmodel.js: listmodel references updated
	indexedlistmodel moved to core

	* legacy/scripts/ui/test/listcollectormodel.js: listmodel references updated
	valuemodel references updated

	* legacy/scripts/ui/test/listmodel.js: listmodel moved to core

	* test/listview.html: listmodel references updated

	* test/teamsizeview.html: listmodel references updated

	* test/scripts/options.js: options.js added for the unit tests

	* core/scripts/rankingcomponentindex.js: a chain ends with undefined, not idrankingcomponent

	* core/scripts/rankingcomponent.js: dummycomponent added to allow for equal ranks
	nextcomponent is undefined -> use dummycomponent as the next component

	* core/scripts/rankingmodel.js: throwing an error if the component chain could not be created

	* core/scripts/test/valuemodel.js: valuemodel moved to core

	* core/scripts/valuemodel.js: valuemodel moved to core

	* legacy/scripts/ui/checkboxview.js: valuemodel references updated

	* legacy/scripts/ui/listclickcontroller.js: valuemodel references updated

	* legacy/scripts/ui/teamremovecontroller.js: valuemodel references updated

	* legacy/scripts/ui/teamstab.js: valuemodel references updated

	* legacy/scripts/ui/test/valuemodel.js: valuemodel moved to core

	* legacy/scripts/ui/valuemodel.js: valuemodel moved to core

	* core/scripts/indexedlistmodel.js: indexedlistmodel moved to core

	* core/scripts/indexedmodel.js: indexedmodel moved to core

	* core/scripts/test/indexedlistmodel.js: indexedlistmodel moved to core

	* core/scripts/test/indexedmodel.js: indexedmodel moved to core

	* legacy/scripts/ui/indexedmodel.js: indexedmodel moved to core

	* legacy/scripts/ui/teammodel.js: indexedmodel/indexedlistmodel references updated

	* legacy/scripts/ui/test/indexedmodel.js: indexedmodel moved to core

	* legacy/scripts/ui/test/teammodel.js: indexedmodel/indexedlistmodel references updated

	* legacy/scripts/ui/debug.js: "dev version" checking restored. matching /-dev$/ now
	"dev version" checking fixed again. matching a sequence number-dot version strings

	* core/scripts/test/vectormodel.js: vectormodel tests added

	* core/scripts/vectormodel.js: resize(), sum(), setproduct() and dot() added
	explicit comparison with undefined

	* core/scripts/matrixmodel.js: full square matrix class
	provides resize(),remove(),length,get() and set()
	getabs() added
	constructor changed to a named function, not a var of an anonymous function
	todo added
	this.array -> this.data
	diagonal() added for main diagonal extraction
	multvector() and vectormult() added for matrix-vector multiplications

	* core/scripts/test/matrixmodel.js: matrixmodel new/resize/get/set/remove tests
	getabs() test added
	unnecessary variable removed
	testing diagonal()
	testing multvector and vectormult

	* build-tools/apply-version.sh: syntax changed to apply-version.sh <version>

	* build-tools/prepare-release.sh: using the new apply-version.sh syntax
	git-adding the correct manifest files
	recursively removing the source directories
	recursively removing core, legacy and lib directories, too

	* build-tools/reset-version.sh: merged into apply-version.sh

	* makefile: `make version` removed
	`make codestyle` now depends on `make scripts`

	* build-tools/create-core-class.sh: writing author and license information to the header comment

	* core/scripts/test/trianglematrixmodel.js: testing whether the "correct" get/set calls fail

	* core/scripts/trianglematrixmodel.js: lower triangle matrix, which aborts when reading/writing above the main diagonal
	comments added

	* core/scripts/symmetricmatrixmodel.js: symmetric matrix, which works like trianglematrixmodel
	read/write calls above the main diagonal are mapped to the lower triangular portion, enforcing symmetry
	comments added

	* core/scripts/test/symmetricmatrixmodel.js: testing whether the matrix really is symmetric. it is.

	* core/scripts/antisymmetricmatrixmodel.js: antisymmetric matrix
	comments added

	* core/scripts/test/antisymmetricmatrixmodel.js: testing the antisymmetric matrix

2015-02-20	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* *.html: version updated to 1.4.5-dev

	* build-tools/apply-version.sh: support for $version$ dropped

	* build-tools/prepare-release.sh: calling reset-version.sh

	* build-tools/reset-version.sh: script to reset the version information to %version%

	* news: version updated to 1.4.5-dev

	* readme.md: version updated to 1.4.5-dev

	* version: version updated to 1.4.5-dev

	* build-tools/create-core-class.sh: optional second argument: base class

	* core/scripts/gamesrankingcomponent.js: rankingcomponent: number of games

	* core/scripts/idrankingcomponent.js: rankingcomponent: player id

	* core/scripts/pointsrankingcomponent.js: rankingcomponent: won points

	* core/scripts/rankingcomponentindex.js: an index of all rankingcomponents

	* core/scripts/rankingcomponent.js: rankingcomponent base class
	rankingcomponents contain compare() and value() functions and form chains for sorting

	* core/scripts/rankingmodel.js: rankingmodel, the new general ranking class

	* core/scripts/saldorankingcomponent.js: rankingcomponent: point difference

	* core/scripts/winsrankingcomponent.js: rankingcomponent: won games

2015-02-18	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* tac/images/favicon.png: tac favicon added

	* tac/images/games.png: pure black tac games added (like favicon)
	using the colored tac icon for now

	* tac/images/svg/games_black.svg: black tac icon

	* tac/images/svg/games.svg: colored tac icon

	* tac/images/svg/teams1.svg: tac always has two players

	* tac/images/svg/teams3.svg: tac always has two players

	* tac/images/teams1.png: tac always has two players

	* tac/images/teams3.png: tac always has two players

	* tac/images/all.png: team sub-icon has two instead of three players

	* tac/images/svg/all.svg: team sub-icon has two instead of three players

	* tac/index.html: all team icons use two instead of three players

	* index.html: welcome page added

2015-02-16	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* build-tools/merge-master.sh: merge a release branch with master
	removing unused files when done
	explanatory output added

	* build-tools/prepare-release.sh: from a newly created release branch: prepare the release
	enabling './merge-master.sh' when done

	* makefile: `make release` and `make merge-master` added
	`make news` added
	`make clean-shared-code` added to clean up after a full release build

	* boule/index.html: netto -> saldo

	* boule/scripts/options.js: target-specific options moved to {target}/scripts

	* build-tools/build.sh: smallchange.png removed from build since it can't be accessed by the css

	* core/style/general.css: .editable: hovering shows an exclamation mark instead of smallchange.png

	* legacy/scripts/ui/options.js: removed in favor of target-specific options

	* legacy/scripts/ui/strings.js: netto -> saldo

	* tac/index.html: netto -> saldo
	.teamsizeview removed (fixed team size)
	max points reduced to 8, since there's only 8 balls per team
	bye: *visible* points changed to 8:6

	* tac/scripts/options.js: target-specific options moved to {target}/scripts

2015-02-15	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* core/scripts/controller.js: moved from legacy/scripts/

	* core/scripts/emitter.js: moved from legacy/scripts/

	* core/scripts/listener.js: moved from legacy/scripts/

	* core/scripts/model.js: moved from legacy/scripts/

	* core/scripts/test/emitter.js: moved from legacy/scripts/test

	* core/scripts/test/model.js: moved from legacy/scripts/test

	* core/scripts/view.js: moved from legacy/scripts

	* legacy/scripts: references to emitter, listener, model, view and controller changed to core/*
	emitter, listener, model, view and controller and their tests moved to core/scripts

	* makefile: `make scripts` added
	also updating the script header comments
	`make all`: `make scripts` dependency added
	`make codestyle` added
	`make version` added

	* build-scripts/update-headers.sh: moved to build-tools

	* build-tools/update-headers.sh: moved from build-scripts

	* build-scripts/create-ui-class.sh: moved to build-tools/create-core-class.sh

	* build-tools/create-core-class.sh: moved from build-scripts/create-ui-class.sh
	now creates a new core class

	* boule/index.html: direct reference to main.js to avoid caching errors

	* boule/scripts/build.js: config.js contents have been moved to main.js

	* boule/scripts/config.js: config.js contents have been moved to main.js

	* boule/scripts/main.js: config.js contents have been moved to main.js

	* tac/index.html: direct reference to main.js to avoid caching errors

	* tac/scripts/build.js: config.js contents have been moved to main.js

	* tac/scripts/config.js: config.js contents have been moved to main.js

	* tac/scripts/main.js: config.js contents have been moved to main.js

	* build-scripts/istarget.sh: removed; functionality has been moved into build.sh

	* build-scripts/makefile: `make codestyle` moved to makefile at project root

	* build-tools/codestyle.sh: fixing the code style of most .js files
	excludes lib and build dirs
	excludes build.js files

	* build-tools/create-commonjs.sh: using the correct code style

	* build-tools/create-testjs.sh: using the correct code style

	* build-scripts/write-version.sh: moved to build-tools/

	* build-tools/write-version.sh: moved from build-scripts/
	also echoing the current version and write actions

2015-02-14	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* names.txt: tuvero. it is decided.

	* scripts/ui/backgroundscripts/featuredetect.js: warning if modernizr cannot be loaded

	* boule/: contains boule-specific contents

	* tac/: contains tac-specific contents

	* core/: contains shared code and assets

	* legacy/: contains old code from the old scripts/ directory
	supposed to be replaced with "core code"

	* lib/: contains external libraries (formerly found in 'scripts/lib')

	* test/: contains test environments, not the tests themselves (yet)

	* index.html: redirect to boule/index.html (for now)

	* *.html: ../lib/require.js -> scripts/require.js

	* */scripts/require.js: copied from lib/require.js

	* lib/require.js: removed. every target has its own require.js file

	* build-scripts/create-commonjs.sh: new script to build core/common.js
	moved to build-tools

	* build-scripts/create-testjs.sh: new script to build test/scripts/test.js
	moved to build-tools

	* build-scripts/write-scripts.sh: removed in favor of create-*js.sh

	* lib/qunit.js: moved to test/scripts/qunit.js

	* boule/scripts/build.js: dedicated boule build configuration

	* boule/style/main.css: moved from mainstyle.css

	* boule/style/mainstyle.css: moved to main.css

	* build-scripts/build.js: removed

	* build-scripts/build.sh: moved to build-tools

	* build-tools/build.sh: moved from build-scripts
	builds the target in a build directory within the project (e.g. boule-build)
	removes unnecessary files from the build directory
	a separate css optimization is performed (independent from the script optimizing r.js run)

	* core/style/general.css: body -> #app

	* tac/index.html: body -> #app

	* tac/scripts/build.js: dedicated tac build configuration

	* tac/style/main.css: moved from mainstyle.css

	* tac/style/mainstyle.css: moved to main.css

	* build-scripts/apply-version.sh: moved to build-tools

	* build-scripts/istarget.sh: added for later reference

	* build-scripts/makefile: moved here for later reference

	* build-scripts/write-manifest.sh: moved to build-tools

	* build-scripts/write-sprite.sh: moved to build-tools

	* build-tools/apply-version.sh: moved from build-scripts

	* build-tools/create-commonjs.sh: moved from build-scripts

	* build-tools/create-testjs.sh: moved from build-scripts

	* build-tools/makefile: `make build`, `make images`, `make codestyle` and `make sprite` retained

	* build-tools/write-manifest.sh: moved from build-scripts

	* build-tools/write-sprite.sh: moved from build-scripts

	* .gitignore: build directories added

	* makefile: `make boule`, `make tac`, `make all` enabled
	`make clean` enabled

	* bugs: removed (see https://github.com/elor/tuvero/issues for bug reports)

	* todo: removed (see https://boulesprog.wordpress.com)

2015-02-11	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* build-scripts/write-sprite.sh: [data-img="sprite"] to show the sprite path-independently

	* index.html: using data-img="sprite" to display the sprite
	missing closing div tag added
	global jquery invocation removed
	using config.js instead of main.js
	aaand using main.js again

	* build-scripts/write-scripts.sh: jquery paths added
	jquery shim added
	unnecessary shims removed
	not updating build.js
	wrapping test.js inside a require(['config']) call

	* scripts/ui: 'lib/jquery' -> 'jquery'
	avoiding the global $ function in favor of the require-provided one

	* test.html: global jquery invocation removed

	* test/: 'lib/jquery' -> 'jquery'
	avoiding the global $ function in favor of the require-provided one

	* build-scripts/build.js: filesaver bugs fixed
	removing licensing comments
	using config.js for paths and shims
	optimizing main.js instead of config.js

	* scripts/common.js: config extracted to config.js

	* scripts/config.js: paths and shims
	loads 'main'
	doesn't load 'main' anymore, but gets loaded by 'main' and 'test'

	* scripts/lib/filesaver.js: update

	* scripts/lib/require.js: update

	* scripts/test.js: contains copy of config.js (for now)
	copy of config.js content removed
	loading config.js before loading common.js

	* scripts/ui/tabs.js: handling premature hide()/show() calls

	* scripts/main.js: loading config.js before loading common.js

2015-02-04	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: testing teamlist <table>, before offering both variants
	simultaneously using teamlist and teamtable
	showtable checkbox added
	tab options are wrapped in their associated span for click delegation

	* scripts/ui/listclickcontroller.js: stepping over tbody when handling a <table>

	* scripts/ui/listview.js: ignoring auto-inserted tbody elements

	* scripts/ui/teammodel.js: using players.foreach instead of for in

	* scripts/ui/teamstab.js: using teamtableview to show/hide table.teamlist rows/cols
	selectors adjusted to support table.teamlist
	teamlist and teamtable are used simultaneously
	showtable triggers the visibility of .teamtable and .teamlist
	tab options are wrapped in their associated span for click delegation
	using teamsfileloadcontroller for loading player names from files (cheap hack)

	* scripts/ui/teamtableview.js: show/hide rows/cols of a team table

	* style/general.css: .tpl removed, .hidden added
	.teamno -> div.teamno, to avoid th.teamno styling
	hidden elements are !important

	* style/teams.css: many changes related to table vs. div styling
	showtable triggers the visibility of .teamtable and .teamlist
	.teamtable rows are 'nowrap'

	* scripts/ui/teamremovecontroller.js: accepting multiple listview instances

	* scripts/ui/update.js: cacheerror commented out
	downloadtoasts-typo fixed

	* scripts/ui/boxview.js: event restriction system blocked the 'toggle' event. fixed that.

	* scripts/ui/tab_ranking.js: hiding empty rankings (no games, every team is in first place)

	* scripts/ui/backgroundscripts/saveonplayernamechange.js: automatically store the state when a player name (or team index) has changed

	* scripts/ui/emitter.js: remove this from listener.emitters when unregistering a listener

	* scripts/ui/listcollectormodel.js: collect all emitted events from any element of a list and re-emit it from a single object

	* scripts/ui/test/emitter.js: test listener.emitters removal

	* scripts/ui/test/listcollectormodel.js: test listcollectormodel

	* scripts/ui/backgroundscripts/tabnewcheaphacklistener.js: listening for state.teams events
	set the tab_new visibility and call tab_new.update if necessary

	* scripts/ui/storage.js: variable cleanup

	* scripts/ui/tab_new.js: tabshandle logic moved to tabnewcheaphacklistener for now

	* scripts/ui/backgroundscripts/taboptionclick.js: auto-delegating clicks on taboption spans to the checkbox

	* scripts/ui/inputview.js: view for easily resetting an input element

	* scripts/ui/teamsfileloadcontroller.js: load teams and player names from an input file

2015-02-02	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/listview.js: indexof() added: retrieve the subview index of any descendant
	getsubview() added
	extra variable declaration removed

	* scripts/ui/textview.js: typo fixed

	* scripts/ui/view.js: model defaulting bug fixed

	* test/listview.html: testing listview.indexof()
	testing listclickremovecontroller

	* scripts/ui/listclickremovecontroller.js: remove an object from a listview via mouse click
	renamed to listclickcontroller.js

	* scripts/ui/listcleanuplistener.js: automatically destroy() the elements of a listmodel instance

	* scripts/ui/listmodel.js: clear(): successively pop() each object, so remove events are emitted

	* scripts/ui/statemodel.js: using a listcleanuplistener for state.teams to avoid memory leaks

	* scripts/ui/listclickcontroller.js: renamed from listclickcontroller.js
	callback and cbthis arguments added to the constructor
	using an 'options' argument instead of many optional ones
	options.event: allowing for different event types (mouseover, mousedown, focus)

	* scripts/ui/newteamcontroller.js: preventing event default and event propagation

	* scripts/ui/teamremovecontroller.js: activating deletion mode when clicking the button
	deactivating deletion mode when clicking anywhere, changing the tab or pressing enter, escape or space
	when in deletion mode, clicking a team listing removes the team and exits deletion mode
	using blur events ensures better stability with less overhead
	actual removal: mousedown instead of click, because it's fired before blur

	* scripts/ui/teamstab.js: using teamremovecontroller for individual team deletions
	using teamnamecontroller for initiating and completing player name changes

	* scripts/ui/test/listmodel.js: clear() now emits remove events

	* build-scripts/create-ui-class.sh: script for prefilling class files

	* scripts/ui/koline.js: using round line caps, because i'm awesome

	* scripts/ui/teamnamecontroller.js: first auto-generated class file
	inserting an input field in place of a player name on click
	on blur, enter or escape keypress, the input field is removed again

	* style/teams.css: only showing the removal button during registration

	* test/teamlistview.html: testing teamnamecontroller

2015-02-01	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* names.txt: paraboule added
	paraboule is way too absurd

	* scripts/ui/listview.js: now a subclass of templateview
	onreset/reset logic bug fixed

	* scripts/ui/templateview.js: templateview integrated

	* scripts/ui/emitter.js: emitter is subclass of listener
	prototype.events added: an object with allowed event types
	callback function arguments: documentation updated to include the data argument

	* scripts/ui/listener.js: listener added: emitters[] field contains all registered emitters
	listener.prototype.destroy() handles coordinated dereferencing

	* scripts/ui/test/emitter.js: listener.emitters added
	prototype.events: shallow event validation test added

	* scripts/ui/test/indexedmodel.js: listener.emitter added

	* scripts/ui/test/playermodel.js: listener.emitter added

	* scripts/ui/test/teammodel.js: listener.emitter added

	* scripts/ui/view.js: view is a subclass of listener

	* scripts/ui/indexedlistmodel.js: using superclass reference instead of direct function access

	* scripts/ui/listmodel.js: prototype.events object and resize event added
	sometimes i'm an idiot. i forgot about if(){}.

	* scripts/ui/test/listmodel.js: testing resize event
	testing insert event
	testing remove event

	* scripts/ui/lengthview.js: lengthview: listview.length to dom text

	* scripts/ui/teamstab.js: using lengthview to show number of registrations
	using teamsizeview to change the team size
	using preregcloserview added to disable team size changes
	preregcloserview applied to the $tab itself
	maxwidth checkbox logic added by combining checkboxview and classview

	* test/teamentry.html: testing lengthview for number of registrations

	* scripts/ui/savestate.js: saving the state when a team has been added or removed

	* scripts/ui/teamsizecontroller.js: teamsizecontroller for processing teamsize button clicks

	* scripts/ui/teamsizeview.js: teamsizeview for selecting and highlighting team size buttons

	* scripts/ui/test/valuemodel.js: valuemodel tests added

	* scripts/ui/valuemodel.js: valuemodel: a getter/setter with update events for arbitrary values
	set(): stricter comparison for value differences

	* scripts/ui/valueview.js: valueview: show textual valuemodel data in the dom

	* style/teamsizeview.css: teamsizeview style sheet
	hiding teamsizeview after registration started and during printing

	* test/teamsizeview.html: teamsizeview test page
	button values removed
	submit button re-added

	* boules.html: autoformatting

	* index.html: using the teamsizeview class
	teamsizeview: button values removed
	newteamview: additional div container added for each input, because of typeahead style override
	#newteamview -> .newteamview
	player names: using divs instead of span-br-pairs

	* scripts/ui/team.js: better return value description
	options.teamsize -> state.teamsize.get()

	* scripts/ui/test/tab.js: all references to tab_teams removed

	* style/mainstyle.css: importing teamsizeview.css
	importing newteamview.css

	* style/teams.css: teamsize styles removed in favor of teamsizeview.css
	newteam-specific styles exported to newteamview.css
	#newteamview -> .newteamview

	* build-scripts/write-reference.sh: error pages for each script
	faster doc build system, which ignores unchanged files

	* makefile: adjusted for the altered doc build logic
	'make style' forces 'make scripts'

	* scripts/ui/newteamcontroller.js: readplayernames extracted from createnewteam
	properly ignoring disabled input fields

	* scripts/ui/newteamview.js: enabling/disabling input fields according to team size
	twitter-typeahead reset logic added
	in addition to disabling the inputs, they're actively hidden

	* scripts/ui/preregcloserview.js: preregcloserview added to disable preregistration dom elements
	comments added

	* scripts/lib/typeahead.js: typeahead library updated

	* style/newteamview.css: #newteamview stylesheet added

	* scripts/ui/ranking.js: options.teamsize -> state.teamsize.get()

	* scripts/ui/tab_history.js: options.teamsize -> state.teamsize.get()

	* scripts/ui/tab_ranking.js: options.teamsize -> state.teamsize.get()

	* scripts/ui/options.js: cheap hack: storing and state.teamsize in place of options.teamsize
	teamsize: 'undefined'-bug fixed

	* scripts/ui/checkboxcontroller.js: checkboxcontroller added for checkbox state control

	* scripts/ui/checkboxview.js: checkboxview added for boolean state visualization

	* test/checkboxview.html: checkboxview and checkboxcontroller test

	* scripts/ui/classview.js: classview: toggle html classes according to valuemap instance

	* scripts/ui/taboptslistener.js: listen for valuemap changes and toggle a tabopts update

	* scripts/ui/tabs.js: using state instead of options for tabopts

2015-01-31	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* build-scripts/write-reference.sh: error page shows jshint, jslint and gjslint output
	using @return instead of @exports

	* build-scripts/write-scripts.sh: gjslint-compatible formatting of auto-generated script
	scripts/ui/interfaces/test folder doesn't exist anymore; now gnoring it.

	* makefile: 'make style' added; uses fixjsstyle to format the js files

	* index.html: teams tab: complete rewrite started

	* scripts/ui/controller.js: moved from interface/

	* scripts/ui/emitter.js: moved from interface/

	* scripts/ui/interfaces/: removed; contents moved to ..

	* scripts/ui/tab_debug.js: tab_teams references removed

	* scripts/ui/tab_games.js: tab_teams references removed

	* scripts/ui/tab_new.js: tab_teams references removed

	* scripts/ui/tab_teams.js: removed. rewriting as teamstab.js

	* scripts/ui/test/emitter.js: moved from interfaces/test

	* scripts/ui/test/indexedmodel.js: moved from interfaces/test

	* scripts/ui/test/model.js: moved from interfaces/test

	* scripts/ui/test/tab.js: moved from interfaces/test

	* scripts/ui/view.js: moved from interfaces

	* scripts/ui/templateview.js: templateview class started. neither tested nor integrated yet.

	* names.txt: naming suggestion file added

2015-01-30	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/listmodel.js: map() added (similar to array.prototype.map)

	* scripts/ui/test/listmodel.js: map() test added

	* scripts/ui/interfaces/emitter.js: emit(): listener iteration changed from direct indexing to map() for convenience

	* scripts/ui/tab_games.js: code style improved, warnings removed

	* .jshintrc: using jshint for validation and debugging

2015-01-28	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/statemodel.js: players and teams added to statemodel

	* scripts/ui/state_new.js: statemodel singleton for coordinated access

	* scripts/ui/team.js: team.size() removed
	team is a wrapper around statemodel.teams until the tab objects have been replaced
	team.getnames added for comfort
	toblob and fromblob had to be rewritten
	save state compatibility restored (when loading boules.json)

	* scripts/ui/history.js: unfortunate reformatting
	function calls to team adjusted for teammodel and playermodel

	* scripts/ui/ranking.js: unfortunate reformatting
	function calls to team adjusted for teammodel and playermodel

	* scripts/ui/tab_games.js: unfortunate reformatting
	function calls to team adjusted for teammodel and playermodel

	* scripts/ui/tab_history.js: unfortunate reformatting
	function calls to team adjusted for teammodel and playermodel

	* scripts/ui/tab_new.js: function calls to team adjusted for teammodel and playermodel

	* scripts/ui/tab_ranking.js: function calls to team adjusted for teammodel and playermodel

	* scripts/ui/tab_teams.js: function calls to team adjusted for teammodel and playermodel

	* scripts/ui/listview.js: constructor: model and $view swapped to better match view

	* test/listview.html: listview constructor calls adjusted

	* test/teamlistview.html: listview constructor calls adjusted

	* scripts/ui/newteamcontroller.js: controller for team submission

	* scripts/ui/newteamview.js: view for the team submission form

	* test/teamentry.html: test page for team submission

2015-01-26	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/boxcontroller.js: view.getelem() has been removed a few commits ago

	* scripts/ui/fontsizecontroller.js: view.getelem() has been removed a few commits ago

	* build-scripts/write-scripts.sh: myrequire() functionality has been moved to common()

	* test/teamlistview.html: common() instead of require() enables post-build view testing

	* test/boxview.html: common() instead of require() enables post-build view testing
	staticviewloader is called automatically in the background

	* test/fontsize.html: common() instead of require() enables post-build view testing
	staticviewloader is called automatically in the background

	* test/koline.html: common() instead of require() enables post-build view testing

	* test/listview.html: common() instead of require() enables post-build view testing

	* test/tableview.html: common() instead of require() enables post-build view testing

	* scripts/ui/staticviewloader.js: variable/function order changed

2015-01-24	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/playermodel.js: using trim() and slice() for string manipulation/copying

	* scripts/ui/test/playermodel.js: playermodel tests added

	* scripts/ui/teammodel.js: enforcing at least one player
	setid is used by constructor (dry principle strikes again)
	only emit update if the id is actually different
	id defaults to -1, instead of 0
	teammodel now is a subclass of indexedmodel

	* scripts/ui/test/teammodel.js: teammodel tests added
	testing both of the changes to listmodel
	moved some tests to the indexmodel tests

	* scripts/ui/listmodel.js: referencing updatelength instead of using duplicated code

	* scripts/ui/indexedmodel.js: generic model with setid and getid functionality

	* scripts/ui/test/indexedmodel.js: tests for getid and setid (moved from teammodel)

	* test/teamlistview.html: teamno field added
	listmodel replaced with indexedlistmodel, and suddenly the indices are updated :-d

	* test.html: favicon set

2015-01-23	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/interfaces/view.js: unnecessary functions removed
	destroy() added for safe removal of the view from the dom and the event listener

	* scripts/ui/listview.js: using subview constructors to enable the display  more complex data
	not removing static dom elements
	referencing all subviews using an array, thus enabling safer removal
	using subview.destroy() to remove the elements and enable clean garbage collection
	defaulting to <div> instead of <li>

	* scripts/ui/textview.js: simple textview as a subview default for listview

	* test/listview.html: explicitly stating the use if <li>

	* scripts/ui/playermodel.js: names are automatically trimmed
	empty names are ignored
	names default to 'noname' until they're properly set

	* scripts/ui/teammodel.js: this.id added
	forgot to export teammodel

	* scripts/ui/teamview.js: unified view for writing team information to a dom element

	* test/teamlistview.html: simple test of teamview, listview, teammodel and playermodel
	testing different team sizes

2015-01-19	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: font size options added

	* scripts/ui/backgroundscripts/box.js: merged into initviews.js

	* scripts/ui/backgroundscripts/initviews.js: loading general views, such as boxes and some options

	* style/fontsizeview.css: button width fixed to 1.2em x 1em

	* bugs: out-of-date disclaimer added

	* todo: out-of-date disclaimer added

	* scripts/ui/koline.js: ko line drawing replacement for jsplumb
	comments and code style

	* scripts/ui/strings.js: svg namespace string added

	* test/koline.html: test for koline class added
	debugging output

	* scripts/common.js: jsplumb removed

	* scripts/lib/jsplumb.js: jsplumb removed

	* scripts/ui/tab_history.js: jsplumb replaced by hand-written solution
	ko tree drawing sped up
	redraw-button no longer required for ko tree drawing

	* scripts/ui/interfaces/emitter.js: emit() accepts data

	* scripts/ui/listmodel.js: refactored to look somewhat like an event emitting array
	comments added

	* scripts/ui/test/listmodel.js: listmodel tests added

	* test/listview.html: wip warning added
	testing the new listview

	* test/tableview.html: wip warning added

	* scripts/ui/listview.js: new listmodel architecture adapted
	third constructor argument ($template) added

	* scripts/ui/playermodel.js: playermodel added (wip)

	* scripts/ui/teammodel.js: teammodel added (wip)

2015-01-08	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/type.js: type verification capabilities added (in the ui directory for now)

	* scripts/ui/staticviewloader.js: functions for automatic recursive assignment of views by the classes of dom elements

	* index.html: .box -> .boxview
	#about: browser compatibility images added/updated
	#about: links updated

	* build-scripts/write-sprite.sh: ignoring 'smallchange.png', which is loaded directly
	4px-alignment of second image of each row fixed

	* images/change.png: removed (svg still remaining)

	* images/logos/chromium_128x128.png: added

	* images/logos/dolphin_128x128.png: added

	* images/logos/lightning_128x128.png: added

	* images/logos/puffin_128x128.png: added

	* images/logos/uc_128x128.png: added

	* style/about.css: unsupported icons are semi-transparent again

	* build-scripts/makefile.in: 'make images': also optimizing smallchange.png

	* scripts/ui/fontsizecontroller.js: fontsizecontroller added

	* scripts/ui/fontsizemodel.js: fontsizemodel added

	* scripts/ui/fontsizeview.js: fontsizeview added

	* style/fontsize.css: define font sizes and rules

	* style/fontsizeview.css: style of fontsizeview

	* style/mainstyle.css: include fontsize.css and fontsizeview.css

	* test/fontsize.html: test page for font size adjustments

	* scripts/ui/boxview.js: unnecessary variable removed

2015-01-06	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* license: copyright notice extended to 2015

2015-01-05	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* build-scripts/write-sprite.sh: css: 'zoom' replaced with 'background-size' for cross-browser compatibility

	* test/sprite.html: sprite test page added

	* index.html: image size classes added to #home and #about

	* style/about.css: better alignment of logo highlights

	* style/debug.css: zoom removed

2014-12-28	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: http/https confusion fixed

2014-12-24	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: home: "why chrome?" box added
	tab_new: reference text changed
	home tab: box order changed

	* style/home.css: floating chrome logo
	logo and text alignment changes

	* images/favicon.png: using the games icon, again

	* build-scripts/write-reference.sh: using cmark instead of stmd for markdown->html conversion

	* makefile: 'make' -> 'make build', not 'make dist'
	applyversion.sh -> apply-version.sh typo fixed
	makefile dependency issue fixed
	make dist: auto-adding version and manifest.appcache to git

	* doc/de/index.html: apology added

	* news: updated from changelog
	next version (1.4.5) started

	* build-scripts/makefile.in: makefile dependency issue fixed
	not removing smallchange.png, which is currently required to be a separate file


2014-12-22	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/listmodel.js: listmodel added

	* scripts/ui/listview.js: listview added

	* scripts/ui/tableview.js: tableview: unused $template variable removed

	* test/listview.html: listview test added

	* scripts/ui/boxview.js: dummymodel removed
	subview removed

	* scripts/ui/dummymodel.js: dummymodel replaced by 'undefined'

	* scripts/ui/interfaces/view.js: model undefined -> use a dummy model automatically

	* scripts/common.js: dummymodel.js autoremoved

	* scripts/ui/tab_new.js: #42 fixed: clicking the bottom header of a tournament doesn't change the name anymore
	using boxview for 'advanced options' boxes
	unnecessary 'collapsed'-check removed

	* scripts/ui/tab_teams.js: #41 fixed: trying to create a team with an empty player name focuses the empty text field

	* index.html: content added to home tab
	showing a wip message on the lanes tab
	home tab: tiny text change
	css selector mixup fixed

	* style/buttons.css: only float buttons which are direct children of a tab
	invalid css selector fixed

	* style/home.css: home tab stylesheet added

	* style/lanes.css: showing a wip message on the lanes tab

	* style/mainstyle.css: home.css included

	* scripts/ui/tab_games.js: using boxview for auto-generated boxes

	* scripts/ui/tab_history.js: using boxview for auto-generated boxes
	css selector mixup fixed

	* scripts/ui/tab_ranking.js: using boxview for auto-generated boxes

	* images/games.png: replaced the dice with two petanque balls

	* images/svg/games.svg: replaced the dice with two petanque balls

	* scripts/ui/backgroundscripts/box.js: unnecessary 'collapsed'-check removed

2014-12-20	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/common.js: ui/tablemodel and ui/tableview added

	* scripts/ui/tablemodel.js: simple model for tableview testing

	* scripts/ui/tableview.js: tableview class for showing text-based non-interactive tables

	* test/tableview.html: tableview test case

2014-12-19	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* style/boxview.css: trying to use different css files for every major view type

	* style/general.css: .box declarations moved to boxview.css

	* style/mainstyle.css: loading boxview.css

	* test/boxview.html: boxview test page added

	* scripts/ui/boxview.js: collapsed boxes: textarea tabbing disabled
	using default sizes (content-wrapping) after expanding

2014-12-14	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/splash.js: unnecessary css class removed

	* style/splash.css: transition positioning fixed. shouldn't stutter anymore

2014-12-13	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/interfaces/emitter.js: event emitter class added

	* scripts/ui/interfaces/test/emitter.js: tests for emitter.js

	* build-scripts/write-scripts.sh: including test directories in the third level

	* scripts/test.js: including emitter.js
	including model.js

	* scripts/ui/interfaces/control.js: mvc base classes added
	moved to controller.js

	* scripts/ui/interfaces/model.js: mvc base classes added

	* scripts/ui/interfaces/view.js: mvc base classes added
	attach() removed, getelem() added

	* scripts/ui/interfaces/test/model.js: model test added

	* scripts/ui/backgroundscripts/box.js: using boxview for every box

	* scripts/ui/boxcontroller.js: controller for boxview

	* scripts/ui/boxview.js: view for collapsing and expanding boxes

	* scripts/ui/dummymodel.js: model without special logic code, but emitter capabilities

	* scripts/ui/interfaces/controller.js: moved from control.js

2014-10-18	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* build-scripts/update-headers.sh: automatically inserting author and license information

	* build-scripts/write-reference.sh: linkes dependencies
	todo page
	todo and overview for script subdirectories
	listing jquery as a dependency
	script metrics section added
	warning about long scripts
	warning about too many dependencies
	writing 'make doc' warnings and errors to errors.html
	extracting functions of a script file
	javadoc-style comments of functions are parsed and displayed
	not discarding any more errors from the error page
	not using potentially-empty regex parens

	* makefile: rebuilding scripts before building docs
	release -> dist
	description updated
	building doc with every build

	* build-scripts/makefile.in: removing favicon.png, not games.png
	optimizing favicon

	* build-scripts/write-sprite.sh: ignoring favicon.png

	* images/favicon.png: new dedicated favicon, copied from games.png

	* index.html: using favicon.png

	* doc/reference/errors.html: contains doc errors and warnings

	* doc/reference/index.html: link to errors.html instead of itself

	* build-scripts/write-scripts.sh: function comment added to common.js
	test.js uses define() instead of require() for improved reference parsing


2014-10-17	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* makefile: makefile added for easier building and updating

	* build-scripts/apply-version.sh: moved from pushversion.sh
	just writes the version from the version-file to all other files

	* build-scripts/build.sh: moved from optimize.sh

	* build-scripts/makefile.in: secondary makefile for non-user targets

	* build-scripts/write-manifest.sh: moved from manifest.sh

	* build-scripts/write-scripts.sh: moved from update-scripts.sh
	hardcoded file names corrected

	* build-scripts/write-sprite.sh: moved from writesprite.sh
	doesn't optimize anymore (using makefile for that)

	* build-scripts/write-version.sh: writes the version-file

	* build-scripts/write-reference.sh: first html files produced


2014-10-13	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: reload button added to tab_history

	* scripts/ui/backgroundscripts/updatetab.js: reload button logic added

	* style/buttons.css: reload button added

	* scripts/ui/tab_history.js: finished tournaments start collapsed

	* scripts/ui/tab_ranking.js: finished tournaments start collapsed

	* images/reload.png: reduced to button size

	* images/svg/reload.svg: reduced to button size

2014-10-12	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* writesprite.sh: optimizing sprite.png

	* index.html: showing the system type next to the subtournament name
	added a save button to every tab
	access keys changed

	* scripts/ui/tab_new.js: showing the system type next to the subtournament name
	checking for missing anchors
	moved the swissperm data object to its own file

	* scripts/ui/tab.js: wrote a general tab factory

	* scripts/ui/tab_debug.js: using the tab factory

	* scripts/ui/tab_games.js: using the tab factory

	* scripts/ui/tab_history.js: using the tab factory

	* scripts/ui/tab_ranking.js: using the tab factory

	* scripts/ui/tab_settings.js: using the tab factory
	save button is now governed by save.js

	* scripts/ui/tab_teams.js: using the tab factory

	* build-scripts/optimize.sh: generating/updating the scripts
	automatically creating manifest for boules-build directory

	* build-scripts/updatescripts.sh: moved from scripts/

	* scripts/ui/storage.js: unnecessary variable removed

	* scripts/updatescripts.sh: moved to build-scripts

	* scripts/data/swissperm.js: swissperm object now has its own data file

	* scripts/ui/backgroundscripts/box.js: moved from scripts/ui
	disallow tabbing inside closed boxes

	* scripts/ui/backgroundscripts/featuredetect.js: moved from scripts/ui

	* scripts/ui/backgroundscripts.js: removed in favor of auto-loading

	* scripts/ui/backgroundscripts/online.js: moved from scripts/ui

	* scripts/ui/backgroundscripts/print.js: moved from scripts/ui

	* scripts/ui/backgroundscripts/reset.js: moved from scripts/ui

	* scripts/ui/backgroundscripts/save.js: moved from scripts/ui

	* scripts/ui/box.js: moved to scripts/ui/backgroundscripts

	* scripts/ui/featuredetect.js: moved to scripts/ui/backgroundscripts

	* scripts/ui/online.js: moved to scripts/ui/backgroundscripts

	* scripts/ui/print.js: moved to scripts/ui/backgroundscripts

	* scripts/ui/reset.js: moved to scripts/ui/backgroundscripts

	* style/buttons.css: separate css file for all floating buttons

	* style/mainstyle.css: loading buttons.css

	* style/tabs.css: moved some content to buttons.css

	* scripts/lib/base64.js: removed in favor of blob.js

	* scripts/ui/history.js: shared wasn't loaded

	* scripts/ui/toast.js: toasts can be closed by the calling code
	'undefined.str' error fixed

	* scripts/ui/update.js: showing a 'downloading...' toast

2014-10-05	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* style/tabs.css: space between tabmenu and tab removed
	tabs: pre-header space in pixel coordinates
	simpler sprite invocation
	print button added
	tab menu positioning rules simplified
	tab header positioning bug fixed
	print button is no longer 'position: absolute'

	* optimize.sh: exit with code 1 on copy failure
	not trying to `rmdir images/`

	* writesprite.sh: python3-compatibility
	simpler sprite invocation
	omitting '.png' extension

	* scripts/ui/tab_new.js: hiding tournamentrank whenever it's unnecessary
	removesystem button logic
	first and last line of a tournament use css to style themselves, not jquery

	* scripts/ui/tabs.js: not overwriting '#reset' hash
	simpler sprite invocation

	* images/home.png: home icon added

	* images/svg/home.svg: home icon added

	* index.html: home tab added
	simpler sprite invocation
	home accesskey: 'a'
	omitting '.png' extensions
	tab_new .removesystem: button with subtournament name instead of tiny xmark

	* images/print.png: print icon added

	* images/svg/clear.svg: resized to 128px

	* images/svg/print.svg: print icon added

	* style/about.css: simpler sprite invocation

	* scripts/ui/backgroundscripts.js: loading print.js

	* scripts/ui/print.js: print button logic added

	* scripts/ui/tab_debug.js: omitting '.png' extensions

	* scripts/ui/tabshandle.js: omitting '.png' extensions

	* style/new.css: expand only the last row of a tournament, not each row

2014-10-04	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: replaced img tags with data-img attributes
	donate forms replaced with static links

	* scripts/ui/tabs.js: using data-img attributes for tabs

	* style/about.css: using data-img attributes

	* style/debug.css: using data-img attributes

	* style/general.css: using data-img attributes

	* style/new.css: using data-img attributes

	* style/settings.css: using data-img attributes

	* style/sprite.css: default values added (zoom and display)

	* style/tabs.css: using data-img attributes
	using px values for tab menu heights and margins (due to collisions with css sprites)

	* style/teams.css: using data-img attributes

	* writesprite.sh: default values added (zoom and display)

	* optimize.sh: removing only sprited images

	* manifest.sh: hiding plain text files for now
	using 'dev' when there's no current version number

2014-10-03	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* images/ext/btn_donatecc_lg.gif: removed

	* images/ext/btn_donatecc_lg.png: converted from the gif file

	* index.html: currently not using a gif file
	showing the sprite in the debug page

	* images/logos/safari_128x128.png: removed

	* images/qr_github.png: removed

	* images/storage.png: removed

	* optimize.sh: writesprite.sh added

	* writesprite.sh: script to combine all images into one sprite
	excluding sprite.png

	* scripts/ui/tab_debug.js: showing sprite images, too
	conversion of paths
	using sprites instead of img
	not showing sprite.png again

	* style/debug.css: using sprites for image list

	* style/mainstyle.css: using sprite.css

2014-09-28	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* index.html: expaining text added to tab_new
	platz -> rang
	using scripts/main.js
	moved the requirejs config to common.js

	* scripts/build.js: optimization enabled
	building and using common.js
	excluding build.js
	filesaver.js is a module on its own

	* scripts/ui/alltabs.js: shared added

	* scripts/ui/autocomplete.js: shared added

	* scripts/ui/globalranking.js: fixed issue #2 (global ranking too high)
	shared added

	* scripts/ui/history.js: shared added

	* scripts/ui/players.js: shared added

	* scripts/ui/state.js: shared added

	* scripts/ui/storage.js: shared added

	* scripts/ui/tab_debug.js: shared added

	* scripts/ui/tab_games.js: shared added

	* scripts/ui/tab_history.js: shared added

	* scripts/ui/tab_new.js: shared added

	* scripts/ui/tab_ranking.js: shared added

	* scripts/ui/tab_settings.js: shared added

	* scripts/ui/tab_teams.js: shared added

	* scripts/ui/team.js: shared added

	* scripts/ui/tournaments.js: shared added

	* scripts/ui/shared.js: shared added

	* scripts/main.js: moved from scripts/ui/main.js
	require paths prepended with 'ui/' to reflect the relative move
	loading common.js
	only loading 'common' directly

	* scripts/ui/main.js: moved to scripts/main.js

	* scripts/common.js: added (autogenerated)
	using define() instead of require()
	moved global requirejs config here

	* scripts/createcommon.sh: generating common.js

	* scripts/test.js: loading common.js
	loading and starting qunit

	* build.sh: build script added for require optimizations

	* scripts/updatecommon.sh: using define() instead of require()
	moved to updatescripts.sh

	* createmanifest.sh: moved to manifest.sh

	* manifest.sh: moved from createmanifest.sh

	* optimize.sh: moved from build.sh
	copying the build results over from the build directory

	* pushversion.sh: calling manifest.sh and optimize.sh instead of performing everything locally
	manifest is created after optimizations!

	* scripts/lib/qunit-1.14.0.js: moved to qunit.js

	* scripts/lib/qunit.js: moved from qunit-1.14.0.js

	* scripts/updatescripts.sh: merged from updatecommon.sh and updatetests.sh

	* scripts/updatetests.sh: merged into updatescripts.sh

	* style/qunit-1.14.0.css: moved to qunit.css

	* style/qunit.css: moved from qunit-1.14.0.css

	* test.html: using common.js for script loading


2014-09-21	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_history.js: 'no tournament' warning disabled
	calculating ko box size from its content, not using jquery
	mapping ko players with byes correctly
	warning about non-applicable corrections
	update after corrections (to update the other teams' points)
	automatic redraw if it becomes visible and there's a ko tournament

	* pushversion.sh: setting the news date

	* scripts/ui/tab_ranking.js: useless code fragment removed
	typo fixed

	* scripts/backend/finebuchholzranking.js: correct() fails -> console.error

	* scripts/backend/swisstournament.js: signal non-applicable corrections
	recalculate the ranking after a correction
	number of tries doubled

	* scripts/ui/tab_settings.js: properly loading from utf-8 files (incl. umlauts)
	using filesaver instead of handrwitten file download soluton
	loading playernames every time the program is opened

	* index.html: download links removed in favor of filesaver

	* scripts/lib/blob.js: bringing "new blob" to old browsers

	* scripts/lib/filesaver.min.js: allow for easy file downloads/saves

	* scripts/ui/history.js: tocsv don't store anything if there's no history

	* scripts/ui/strings.js: several file download strings added

	* scripts/ui/tab_games.js: typo fixed

	* scripts/ui/tab_new.js: typo fixed

	* scripts/ui/tab_teams.js: typo fixed

	* scripts/ui/ranking.js: csv export works properly, even for ko systems and multiple tournaments


2014-09-16	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_debug.js: names with umlaut characters added

	* boules.html: contains only redirects

	* index.html: contains the actual page

	* scripts/ui/tab_history.js: drawing the tree without byevotes (for now)
	also drawing an "expecting" player in the topmost game

2014-09-15	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* createmanifest.sh: network section added for interaction with the database

2014-09-14	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: ko tournament renderer added

	* scripts/lib/jquery.jsplumb-1.6.4-min.js: library for block connectors

	* scripts/ui/tab_history.js: drawing kotournaments as trees by default

	* style/history.css: ko tree

2014-09-13	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: got rid of the strange span system for corrections
	tournamentrank column added in tab_new
	tournament chname field added
	unicode entity added for tournament removal "button"
	added a teamsize input for new tournaments
	pre-collapsed advanced options box for swisstournament
	mail and phone swapped
	ko-system button added
	ko mode selection added

	* scripts/ui/history.js: addcorrection() takes input of the same format you get from its other functions
	addcorrection() also rewrites the matching game
	stupid error fixed where i didn't copy arrays first
	another stupid error in the same function where i forgot to create arrays
	getcorrections() added

	* scripts/ui/tab_history.js: taking old point for corrections from colon-sep'd text
	extra jquery calls removed
	can now correct within progress lists
	it's forbidden to change byes
	using tournaments.getranking()
	update(force) added
	showing kotournaments with the simple interface

	* style/history.css: name hide override

	* scripts/ui/debug.js: debug.isdevversion added
	determining dev status by parsing the page title for "%version%"

	* scripts/ui/strings.js: nomanifest added
	namechangeaborted added
	tournament removal strings added
	tournamentstarted added

	* scripts/ui/tab_debug.js: using debug.isdevversion
	using updating teams for the tournaments array
	using tournaments.getranking()
	update(force) added (not for itself)

	* scripts/ui/update.js: update.isdevversion removed
	if no dev version and manifest is missing: print warning toast
	eclipse warning suppressed with another cheap hack

	* scripts/ui/tab_new.js: tournamentrank column used
	globalranking used
	players are added by tournaments.addtournament from global ranking
	using tournaments.getranking()
	tournament namechange logic added
	stub for multiple parallel tournaments added
	chabort function simplified
	not passing tournament objects around
	showing an error if a tournament isn't running, but wants to be displayed
	adding removal button to every system block
	adding 'editable' class only to actual tournaments
	tournament removal enabled
	new global ranking format used
	preparing the use of parentid and multiple tournaments
	major updatesystems() cleanup!
	supporting the display of multiple tournaments
	startrank bugfix
	using the tournament order for displaying running systems
	avoiding stupid startteam indices (e.g. >numplayers)
	avoiding stupid team sizes
	using correct parent ids
	starting tournaments with the user-defined team size
	specifically asking for the place of the next child
	ko tournaments enabled
	update(force) added
	initko() added

	* scripts/ui/globalranking.js: globalranking.get() added
	using tournaments.getranking()
	tournaments.getrankingorder() is used to determine tournament dependencies

	* scripts/ui/tournaments.js: addtournament adds players according to global ranking
	removetournament added
	getranking added to get the last ranking transparently
	blob functions updated to the new format
	using parent referencing to build an ordered tree for global rankings
	numteamsleft() and getstartrank() added
	addtournament uses the correct start rank
	number of teams verification during tournament start
	numteams() prints the correct number, even for (undefined)
	some minor bugfixes
	getstartrank bugfixing
	null vs undefined!
	don't recurse all the way to undefined in getstartrank
	flipped comparison
	allowing to count all children during getstartrank. that way...
	...the user can specify that he wants the position of the next child
	ko tournaments enabled
	gettype() added

	* scripts/ui/ranking.js: using tournaments.getranking()

	* scripts/ui/tab_games.js: using tournaments.getranking()
	using and storing game ids
	update(force) added
	update everything once a game has finished, because it's going to be updated anyway

	* scripts/ui/tab_ranking.js: using tournaments.getranking()
	not passing around tournament objects
	reading corrections from history, not tournaments
	update(force) added

	* scripts/ui/tab_teams.js: escape rename abort added
	namechangeaborted toast added
	update(force) added

	* scripts/backend/game.js: game id added

	* scripts/backend/kotournament.js: game id added
	options adjusted
	blob functions written
	numrounds corrected
	default mode: 'set'
	byeorder removed
	minmatchround removed
	some logging removed
	start() and finishgame() rewritten to get rid of kotournament
	starting new games as soon as they become available
	indexing bugs fixed
	getranking() written

	* scripts/backend/swisstournament.js: game id added and passed through most functions

	* scripts/backend/tournament.js: getcorrections() doesn't set a game id

	* scripts/backend/test/swisstournament.js: getcorrections() doesn't set a game id

	* style/general.css: collapsed boxes aren't printed
	box headers adjusted in size in printing mode

	* scripts/ui/box.js: allowing pre-collapsed boxes

	* scripts/ui/alltabs.js: update(force) added

	* scripts/ui/tab_settings.js: update(force) added


2014-09-12	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: progresstable checkbox active by default
	progresstable template added
	text for some tournament systems added
	progresstable header simplified
	classes for smallchange image added
	correct button replaced by a text span
	corrections in progresstable enabled

	* scripts/ui/history.js: getgames added for easy iteration

	* scripts/ui/strings.js: winstatus* strings added

	* scripts/ui/tab_history.js: progress table creation
	using progress table if enabled by checkbox
	using the byevote symbol for the progress table
	not relying on button.correct anymore, using .correct only

	* style/general.css: tables: borders-collapse by default
	print mode looks pretty
	.editable class added

	* style/history.css: different styles for gamestable and progresstable
	progresstable beautification
	print mode bugs fixed
	gamestable: separate border-collapse
	button.correct style removed

	* scripts/backend/finebuchholzranking.js: number of completed games removed from sort order

	* scripts/backend/kotournament.js: start() return value now is a simple bool

	* scripts/backend/swisstournament.js: start() return value now is a simple bool

	* scripts/backend/test/swisstournament.js: start() return value now is a simple bool

	* scripts/backend/tournament.js: start() return value now is a simple bool

	* scripts/ui/tournaments.js: support for team lists added

	* style/new.css: separate border-collapse enabled for this table only
	unwanted table borders removed

	* images/change.png: added

	* images/smallchange.png: added

	* images/svg/change.svg: added

	* images/svg/smallchange.svg: added

	* style/teams.css: text change hover -> show smallchange icon

	* scripts/ui/tab_new.js: 'editable' class added

2014-09-11	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: splash loaderror added

	* scripts/ui/main.js: handling all requirejs errors by showing a loaderror

	* style/splash.css: loaderror class added

	* scripts/ui/tabs.js: another try at disabling hashchange jumps

2014-09-10	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/online.js: callback function: event verification
	callback function: dev output temporarily added
	dev output disabled again

	* boules.html: splash error text added

	* scripts/ui/main.js: catching load errors to be shown by the splash screen

	* scripts/ui/splash.js: error display added

	* scripts/ui/storage.js: try..catch block removed. didn't work anyway

	* style/splash.css: highlighting links boldly ;-d
	error text added to the display/hide rules

	* scripts/ui/tab_debug.js: showing debugging tab in dev versions

2014-09-09	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_new.js: bye of the first team was not added
	addnewsystem() for unified tournament creation added
	setting the name of new tournaments
	showing system footer
	showing the tournament name, if available

	* scripts/ui/tab_debug.js: sidetournaments have correct byes
	sidetournaments allow max players
	sidetournaments allow two players

	* scripts/ui/strings.js: default tournament names added
	offline exit question added

	* style/new.css: showing system footer

	* style/history.css: height of team block reduced
	table cell spacing adjusted
	number has no max-width anymore (4-digit-numbers look ... bad)

	* scripts/ui/tab_ranking.js: tab_ranking: double ranking table removed

	* scripts/ui/tab_teams.js: tab_teams rename -> tab_new update

	* scripts/ui/tab_settings.js: don't reload the page if a file load fails

	* scripts/ui/csver.js: tocsv interface added

	* scripts/ui/test/csv.js: csver interface tests added

	* scripts/ui/history.js: tocsv() added, implemented and tested

	* scripts/ui/ranking.js: tocsv fixed (showing corrections + using nice headers)

	* scripts/ui/main.js: online.js reference added
	using backgroundscripts.js

	* scripts/ui/online.js: online/offline detection added
	if offline and not cached, ask before exiting

	* scripts/ui/update.js: update.iscached added

	* scripts/ui/debug.js: stacktrace not divided into multiple files

	* scripts/ui/backgroundscripts.js: loader for a collection of background scripts


2014-09-08	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_games.js: game result submissions work again
	got rid of dom injection of tournament ids
	and now we're using jquery for unique identifiers
	adding game with the correct tournamentid to history

	* boules.html: .corr.tpl -> .corr
	history gamestable class added
	tab_new system: states added (at least for swiss)
	newsystem box added to tab_new
	trailing whitespaces stripped

	* scripts/ui/tab_ranking.js: template.correction.$teamnos not found -> fixed
	.correctiontable -> .correctionstable. stupid typo.
	some idiot (me) hid a detached container and wondered when it didn't show

	* scripts/ui/history.js: history.numtournaments() added to avoid calling tournaments.size()
	tournaments.size() != history.numtournaments() in some cases

	* scripts/ui/tab_history.js: setround() removed
	createbox() -> creategame()
	template updated
	showtournaments() added for drawing all past and present tournaments
	update(): code length reduced
	getting tournamentid from previourly stored jquery data
	using the correct tournament id for corrections

	* scripts/ui/strings.js: toolatetournamentfinished added

	* scripts/ui/tab_debug.js: playtournament() and finishround() work with multiple tournaments
	startround adapted to new multi-system layout
	playtournament can cold-start without manually calling startround first

	* scripts/ui/tab_new.js: supporting tournament states
	swiss -> tournament for all general variable names
	always showing the new tab (which is likely to be renamed in the future)
	.newsystem added for tournament system selection
	getranking() handles empty tournaments

	* style/new.css: only show current tournament state
	header x-padding added
	accidentally prevented templates from hiding

	* scripts/ui/tournaments.js: tournaments.size() deprecated
	tournaments.numtournaments() added
	tournaments.gettournamentid added (for inverse association of a tournament to its id)
	gettournament() checks whether the tournament exists, first
	swiss stub removed. we're live now!

	* scripts/ui/tab_teams.js: seemingly ancient bug: teamsize was hidden

	* scripts/backend/swisstournament.js: do not reset the swiss mode without the user expecting it

2014-09-07	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: #new tab drastically rearranged
	#reset accesskey added
	supermelee placeholder added
	debug tab relocated
	donate button image placed in image/ext/
	#debug .box.allimages added
	update splash text added
	lanes tab added (hidden)
	history tab progresslist logic inverted
	ranking templates update for multiple tournaments
	games templates updated for simultaneous tournaments

	* scripts/ui/main.js: adding window.mods if this is a dev version
	calling splash.update()
	box reference added for requirejs

	* scripts/ui/options.js: restructuring started
	tournament key changed to 'boulestournament'

	* scripts/ui/reset.js: moving to #debug after reload

	* scripts/ui/strings.js: mods string changed

	* scripts/ui/tab_debug.js: automatically adding window.mods in dev versions
	removing dangerous content (.devonly) in release versions
	not overwriting existing window.mods variables
	showing all <img>s at pageload in .allimages box
	allimages: title added for hover text
	removed swiss references, but i have to redo the whole gui shortcut system

	* scripts/ui/tab_new.js: complete rewrite
	create table layout to enable multiple parallel tournaments
	first step towards tournament encapsulation
	getroundvotes() copied over from tab_games
	using new history format
	all operations use the last tournaments entry, but it's capable of multiple ones

	* scripts/ui/team.js: team.size() added for faster development

	* scripts/ui/update.js: autoformat
	update.isdevversion added (only in dev versions)
	error -> warn

	* style/general.css: tables don't have border-spacing
	wider x-margins for box headers
	collapsed box style added

	* style/new.css: restyled
	'todo' boxes are vertically aligned

	* style/tabs.css: page content fades in after pageload
	tab menu has fixed height (quadratic images)
	double-slide fix for splash screen
	not using transition prefixes anymore!

	* scripts/ui/splash.js: double-slide fix for splash screen
	showing tabs at view update, not at storage load

	* images/lane.png: renamed to lanes.png

	* images/lanes.png: renamed from lane.png
	redesigned

	* images/svg/lanes.svg: renamed from lane.svg
	redesigned

	* images/svg/lane.svg: renamed to lanes.svg

	* style/debug.css: allimages fixed image height added

	* style/lanes.css: lanes tab is currently disabled

	* scripts/ui/storage.js: combining subsequent store() calls into one
	nagging debug text added (for now)
	'key doesnt exist' error is now just a warning

	* scripts/ui/tab_games.js: removed tab_history.createbox() dependency
	using new history format
	$.delegate replaced by $.on
	swiss removed from includes, but i'm still working on it
	now displaying multiple tournaments simultaneously
	functions cleaned up while we're at it

	* scripts/ui/tab_history.js: nextround() removed
	moved createbox() and createbye() into local block
	using new history format
	missing variable added
	corrections fixed again (they now work with the new history format)
	progresstable checkbox logic changed
	swiss removed. the history tab uses only the first tournament so far

	* scripts/ui/tab_teams.js: reduced the number of cross-tab update calls:
	createbox() doesn't call other tabs anymore
	updateafterteamadd() added
	$.delegate replaced by $.on

	* scripts/backend/kotournament.js: gettype() added

	* scripts/backend/swisstournament.js: gettype() added

	* scripts/backend/tournament.js: gettype() added to interface

	* scripts/ui/swiss.js: only referencing tournaments.js anymore
	tournaments key changed from 'swiss' to 'tournaments'
	removed in favor of the tournaments system

	* scripts/ui/state.js: swapped swiss with tournaments

	* scripts/ui/test/blobs.js: testing whether tournaments implements blobber

	* scripts/ui/box.js: box collapse mechanism added
	i managed to let it transition back to height:auto! yeah!

	* style/splash.css: not using transition prefixes anymore

	* style/toasts.css: not using transition prefixes anymore

	* scripts/ui/history.js: complete rewrite for the following reasons:
	accomodate for multiple tournaments
	reduce storage space
	history.findgames() added to find games by participating teams


	* scripts/ui/tournaments.js: new, more efficient internal format
	fixed tournament ids
	gettype() function added
	tournament now works with the same tournamentids as history

	* style/history.css: progresslist logic flipped

	* scripts/ui/ranking.js: csv export of multiple tournaments (not yet tested)

	* scripts/ui/tab_ranking.js: swiss removed from the header, but i'm still working on it
	process all running tournaments
	template functions updated


2014-09-06	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: #about is now using the .box class
	simplified the name fields in the games tab
	using a box around the running games
	team tab: teams aren't floating anymore
	validator run: only 3 errors this time
	using a list for no-support items
	wrapped the ranking table inside a box

	* style/about.css: restyling
	no tab should have a max-width. centered its boxes instead

	* style/general.css: .box contents are usually centered
	box header selector disambituated
	box header is automatically centered
	h2 is always centered
	boxes are wrapping their contents

	* scripts/ui/tab_games.js: names entry simplified (well, not for jquery :-d )
	using .votes as an anchor
	combining multiple updates into one

	* style/games.css: games tab .game boxes updated
	forgot to un-float .vote boxes

	* style/teams.css: floats were changed to inline-blocks

	* scripts/backend/rleblobber.js: run length blobber for sparse nested numerical arrays written

	* scripts/backend/test/rleblobber.js: exhaustive rleblobber tests written

	* scripts/test.js: rleblobber tests linked in

	* scripts/backend/finebuchholzranking.js: using rleblobber
	critical typo fixed: didn't repopulate the sparse array with 0s

	* scripts/backend/halfmatrix.js: using rleblobber

	* scripts/backend/swisstournament.js: using rleblobber

	* scripts/ui/tab_history.js: combining multiple updates into one

	* scripts/ui/tab_new.js: combining multiple updates into one

	* scripts/ui/tab_ranking.js: combining multiple updates into one

	* scripts/ui/tab_settings.js: combining multiple updates into one

	* scripts/ui/tab_teams.js: combining multiple updates into one

	* scripts/ui/main.js: reset.js enabled
	calling tabs.valid() instead of letting it call on pageload
	using yet another timeout for smoother transitions

	* scripts/ui/reset.js: #reset: reset localstorage to factory settings

	* scripts/ui/strings.js: reset string added

	* scripts/ui/tabs.js: not switching to the first valid tab on pageload
	switching to the first valid tab on hashchange

	* style/ranking.css: tables are now inline-tables, not inline-blocks
	names width typo fixed

	* style/tabs.css: tabs are now contained in their container, not absolute-floating
	adjusting min-width according to content width (css extensions needed)


2014-09-05	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: splash screen added
	scripts relocated to bottom of the body
	splash classes unambiguated
	using generalised .box classes for containers

	* scripts/ui/main.js: hiding the splash screen
	using several splash stages
	starting toasts separately, or the timing would mess things up
	showing the tabs only after the tournament has been loaded

	* scripts/ui/splash.js: changing and hiding the splash screen
	using a better staging/state mechanism

	* style/mainstyle.css: splash screen stylesheet included

	* style/splash.css: style sheet for the splash screen added
	multibrowser support for splash sliding transition added
	using the new staging approach

	* scripts/ui/toast.js: using an init() function to avoid bad timing due to long hangs
	toast timing bug fixed (don't redefine a module-loaded constructor!)

	* style/tabs.css: showing the tabs only after the tournament has been loaded

	* images/reload.png: recentered

	* images/svg/reload.svg: recentered

	* scripts/ui/tab_history.js: using .box instead of .round

	* style/about.css: donatebuttons are now centered

	* style/general.css: general .box style defined

	* style/history.css: .round classes removed in favour of .box classes

	* style/settings.css: .block classes removed in favour of .box classes

2014-09-04	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: donate button added
	amazon wishlist link added
	placed donate buttons on the same line

	* images/ext/amazonwishlist.png: amazon wishlist image added

	* images/xcf/amazonwishlist.xcf: gimp file added

	* style/settings.css: placed donate buttons on the same line
	accidentally used the wrong file

	* style/about.css: accidentally used the wrong file

	* images/lane.png: lane icon added

	* images/svg/lane.svg: lane icon added

2014-09-02	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: list view in history tab

	* scripts/ui/tab_games.js: disabling maxwidth option when showing no player names

	* scripts/ui/tab_history.js: disabling maxwidth option when showing no player names
	tab options added
	using list view

	* style/history.css: using list view
	tab options added

	* style/ranking.css: using full width again

2014-09-01	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: todo, bugs, changelog added to developer settings
	"shownames" button added in games tab
	localstorage usage meters added
	history tab restructured

	* style/settings.css: unnecessary divs removed

	* images/file.png: added

	* images/svg/file.svg: added

	* scripts/ui/tab_debug.js: playtournament(): let the browser render every second

	* style/toasts.css: toast border added

	* scripts/ui/tab_games.js: "shownames" button added in games tab

	* style/games.css: "shownames" button added in games tab

	* scripts/ui/tab_settings.js: localstorage usage meters added

	* scripts/ui/tab_history.js: history tab restructured

	* style/history.css: history tab restructured

2014-08-27	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* doc/de/glossary.html: updated automatically

	* doc/writeglossary.sh: typo fixed that created the wrong link href
	functions added

	* boules.html: settings tab blocks redesigned

	* style/general.css: link underlining: now only for links, not all anchors

	* style/settings.css: settings tab: look improved

2014-08-26	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: storage -> settings

	* scripts/ui/alltabs.js: tab_storage -> tab_settings

	* scripts/ui/main.js: tab_storage -> tab_settings

	* scripts/ui/storage.js: tab_storage -> tab_settings

	* scripts/ui/tab_debug.js: tab_storage -> tab_settings

	* scripts/ui/tab_storage.js: tab_storage -> tab_settings

	* scripts/ui/tab_settings.js: tab_storage -> tab_settings

	* scripts/ui/test/tab.js: tab_storage -> tab_settings

	* style/storage.css: #storage -> #settings
	renamed to settings.css

	* style/mainstyle.css: storage -> settings

	* style/settings.css: storage -> settings
	floating block layout replaced by vertical arrangement

	* createmanifest.sh: executable permissions added

	* pushversion.sh: executable permissions added

	* scripts/updatetests.sh: executable permissions added

2014-08-25	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* doc/de/glossary.html: automatic update

	* doc/de/glossary.txt: fabe and i edited some stuff

	* doc/writeglossary.sh: support for more link formats added

	* boules.html: feature notifications added. note to self: don't forget to add new features
	icon paths updated

	* style/about.css: showing and hiding feature notifications as needed

	* images/*.png: new icons created

	* images/svg/*.svg: new icons created

2014-08-24	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* players.txt: removed in favor of external solution

	* scripts/ui/options.js: playername location changed to boulesdb installation

	* scripts/ui/tab_storage.js: ajax mess cleaned up: using json and boulesdb now

2014-08-19	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* doc/de/glossary.*: german glossary started

	* doc/writeglossary.sh: automatic script to update glossary.html from glossary.txt

	* readme.html: moved to doc/de/index.html

2014-08-18	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* images/logos/: browser logos added

	* images/about.png: question mark icon added

	* boules.html: 'about' tab added

	* readme.html: added

	* style/about.css: added

	* scripts/ui/history.js: eclipse warning suppressed

	* scripts/ui/tab_storage.js: accidental double-assignment fixed

	* scripts/ui/tab_games.js: unnecessary jslint warning unsuppressed

	* scripts/update.js: "dev version" toast is now infinite

2014-08-11	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/update.sh: less error messages


2014-08-10	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/toast.js: toast length constants added
	added infinite toasts (intended for update notifications)

	* scripts/ui/main.js: checking for updates once

	* scripts/ui/strings.js: update strings added
	fallback strings updated

	* .gitignore: ignoring temporary files of various editors

2014-06-01	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_storage.js: download under specific file name (using blob and window.uri, where available)

	* scripts/ui/state.js: moved from blob.js

2014-05-31	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_storage.js: focus tab_teams on file load
	autosave option removed. serialization proved fast enough
	save newly loaded player names
	filereader/nofilereader fallbacks updated

	* scripts/ui/tab_ranking.js: auto-update option removed. the calculations proved fast enough

	* style/*.css: print mode added. printing looks nice now

	* scripts/ui/toast.js: parsing different transition formats (opera)

	* scripts/ui/tab_new.js: error fixed where the registration wasn't closed after blob.fromblob()

2014-05-30	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: moved tab_new after tab_teams
	moved team size selection to tab_teams
	"fixed" a clear:both bug

	* scripts/ui/tab_teams.js: csv import correctly interprets double quotes
	deletion button and logic added
	registration and deletion forms/buttons now show and hide correctly

	* scripts/ui/tab_new.js: moved 'new round' form from tab_games to tab_new
	when starting a round, automatically focus tab_games

	* scripts/ui/tab_games.js: moved 'new round' form from tab_games to tab_new
	when finishing a round, automatically focus tab_new

	* scripts/ui/tabs.js: focus() added

	* scripts/ui/players.js: tostring and fromstring added

	* scripts/ui/tab_storage.js: automatically loading players from players.txt

	* scripts/ui/storage.js: run reset() on every stored object on deletion

	* scripts/ui/tab_debug.js: really removing everything, not just the current state

	* scripts/ui/team.js: erase() added

	* scripts/backend/finebuchholzranking.js: critical bug fixed where the number of games was calculated incorrectly

2014-05-29	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_teams.js: reading teams from a file

	* scripts/ui/tab_debug.js: using strings object for toasts

	* scripts/ui/toast.js: fading behavior improved

	* scripts/ui/tab_games.js: first and subsequent rounds started from the same page

2014-05-28	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: favicon added (games.png)
	increased max points to 15

	* scripts/ui/tab_storage.js: togglestorage function hidden

	* scripts/ui/toast.js: reading fading times from css
	toast: use console.error without a style sheet

	* scripts/ui/tab_debug.js: finishtournament implemented

	* scripts/ui/tab_games.js: preset 'nice' added
	using options.maxpoints

	* scripts/ui/tab_ranking.js: using $autoupdate.change() instead of .click()
	showing the number of votes

	* scripts/backend/swisstournament.js: storing the number of votes
	critical bug with the permissions matrix fixed
	if a wingroup is empty, one player can be downvoted multiple times

	* scripts/ui/strings.js: vote strings: using the respective unicode characters

	* style/games.css: permission behavior changed

	* scripts/ui/tabs.js: involuntary tab reloading fixed

	* scripts/backend/test/swisstournament.js: tests "fixed"

2014-05-27	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* boules.html: debug values changed

	* scripts/backend/swisstournament.js: mode 'halves': byevote fixed
	allowed more corner cases when working with win groups

	* scripts/ui/alltabs.js: tab_debug added

	* scripts/ui/tab_debug: don't reload on storage clear

	* scripts/ui/tab_games.js: don't reload on tournament start
	permission selection added

	* scripts/ui/tab_storage.js: don't reload no storage clear

	* scripts/ui/test/tab.js: tab_debug and alltabs (technically a tab) added

	* style/teams.css: name height extended to a reasonable value


2014-05-26	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_games.js: tiny variable cleanup (var i removed)

	* boules.html: hidden debugging tab added

	* images/debug.png: hidden debugging tab added

	* scripts/ui/alltabs.js: hidden debugging tab added

	* scripts/ui/tab_debug.js: hidden debugging tab added

	* scripts/ui/tab_games.js: hidden debugging tab added
	options.stage added

	* scripts/ui/tabs.js: hidden debugging tab added

	* style/debug.css: hidden debugging tab added

	* style/mainstyle.css: hidden debugging tab added

	* scripts/backend/finebuchholzranking.js: games[] added

	* scripts/backend/swisstournament.js: getranking().games[] added
	newroundbyhalves uses ranking order
	newroundby* fixed

	* scripts/ui/tab_ranking.js: number of games

	* scripts/ui/tab_storage: developer tools added
	textareas and localstorage-checkbox removed

2014-05-19	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* images/qr_github.png: added

2014-05-18	erik e. lorenz	<erik.e.lorenz@gmail.com>

	* scripts/ui/tab_storage: fixed buttons not resetting on update()

	* style/teams.css: made overflow-x/y inconsistency note

	* style/games.css: added margin to .vote containers

	* style/ranking.css: using ellipsis when player names are too long

	* scripts/backend/swisstournament.js: options extended and option functions generalized
	enabled vote permissions
	fromblob: missing this.rkch=true added to notify about updates to this.ranking
	'random' and 'halves' modes added
	undefined-byevote-bug fixed

	* scripts/ui/strings.js: csv headers: multiword strings grouped with quotes

	* scripts/ui/tab_games: using options (opts) to allow registrations

	* changelog: changelog started. for previous changes, see git history
