stages:
  - build
  - deploy
  - release

variables:
  SERVER_HOSTNAME: "server.local"
  REPOSITORY_PATH: "elor/tuvero"

image: alpine:latest

build:dev:
  stage: build
  only:
    - develop
    - /^feature-.*$/
  script:
    - apk update
    - apk add nodejs nodejs-npm git
    - npm install
    - npm install cli/
    - npm run-script build
  artifacts:
    paths:
      - build/
    expire_in: 1 day

deploy:dev:
  stage: deploy
  environment:
    name: staging
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  dependencies: []
  script:
    - apk update
    - apk add curl
    - curl -X POST -F token=$TURNIERE_TUVERO_TOKEN -F ref=master http://server.local/api/v4/projects/1/trigger/pipeline

build:release:
  stage: release
  when: manual
  variables:
    GIT_STRATEGY: clone
  only:
    - develop
  before_script:
    - apk update
    - apk add nodejs nodejs-npm git openssh-client
    - mkdir -p ~/.ssh/
    - chmod 700 ~/.ssh/
    - echo "$SSH_DEPLOY_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -t rsa ${SERVER_HOSTNAME} > ~/.ssh/known_hosts
    - git remote add server git@${SERVER_HOSTNAME}:${REPOSITORY_PATH}
    - version=$(sed -n 's/^.*"version".*:.*"\([0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\)\?\)-.*".$/\1/p' package.json)
    - git config --global user.email "info@tuvero.de"
    - git config --global user.name "Tuvero Autobuild"
  script:
    - test -z "${version}" && { echo "Cannot read version"; exit 1; }
    - sed -i -e "s/${version}-[a-z][a-z0-9]*/${version}/" package.json
    - npm install
    - npm install cli/
    - npm run-script release
    - test -z "$(find -name '.*' -not -path './.git' -not -path '.' | tee /dev/stderr)"
    - git add -u
    - git add .
    - git commit -m "Release ${version} built"
    - git checkout staging
    - git merge -X ours develop
    - git push server staging:staging
